{"file":"make-ref.js","mappings":"AAAA;;;;;;;;SAegB,OAAO,CACrB,sBAA6C;IAE7C,IAAI,OAAO,GAAG,IAAI,CAAC;IACnB,IAAI,cAAc,GAAG,IAAI,OAAO,CAAC,CAAC,GAAG,MAAM,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC;IAC3D,IAAI,OAAO,GAAM,IAAI,CAAC;IAEtB,MAAM,cAAc,GAAG,CAAC,GAAM;QAC5B,OAAO,GAAG,GAAG,CAAC;QACd,sBAAsB,aAAtB,sBAAsB,uBAAtB,sBAAsB,CAAG,GAAG,CAAC,CAAC;QAC9B,OAAO,EAAE,CAAC;KACX,CAAC;IAEF,cAAc,CAAC,OAAO,GAAG,OAAO,CAAC;IACjC,cAAc,CAAC,cAAc,GAAG;QAC9B,MAAM,cAAc,CAAC;QACrB,OAAO,OAAO,CAAC;KAChB,CAAC;IAEF,OAAO,cAAc,CAAC;AACxB;;;;","names":[],"sources":["src/components/utils/make-ref.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport type MakeRef<T> = {\n  (ref: T): void;\n  current: T;\n  waitForCurrent(): Promise<T>;\n};\n\nexport function makeRef<T>(\n  currentChangedCallback?: (element: T) => void\n): MakeRef<T> {\n  let resolve = null;\n  let currentPromise = new Promise((res) => (resolve = res));\n  let current: T = null;\n\n  const setRefFunction = (ref: T) => {\n    current = ref;\n    currentChangedCallback?.(ref);\n    resolve();\n  };\n\n  setRefFunction.current = current;\n  setRefFunction.waitForCurrent = async () => {\n    await currentPromise;\n    return current;\n  };\n\n  return setRefFunction;\n}\n"],"version":3}