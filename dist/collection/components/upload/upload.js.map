{"version":3,"file":"upload.js","sourceRoot":"","sources":["../../../src/components/upload/upload.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n} from '@stencil/core';\nimport { UploadFileState } from './upload-file-state';\n\n@Component({\n  tag: 'ix-upload',\n  styleUrl: 'upload.scss',\n  shadow: true,\n})\nexport class Upload {\n  /**\n   * The accept attribute specifies the types of files that the server accepts (that can be submitted through a file upload).\n   * [accept]{@link \"https://www.w3schools.com/tags/att_input_accept.asp\"}\n   */\n  @Prop() accept: string;\n\n  /**\n   * If multiple is true the user can drop or select multiple files\n   */\n  @Prop() multiple = false;\n\n  /**\n   * Whether the text should wrap to more than one line\n   */\n  @Prop() multiline = false;\n\n  /**\n   * Disable all input events\n   */\n  @Prop() disabled = false;\n\n  /**\n   * After a file is uploaded you can set the upload component to a defined state\n   */\n  @Prop() state: UploadFileState = UploadFileState.SELECT_FILE;\n\n  /**\n   * Will be used by state = UploadFileState.SELECT_FILE\n   */\n  @Prop() selectFileText = '+ Drag files here or…';\n\n  /**\n   * Will be used by state = UploadFileState.LOADING\n   */\n  @Prop() loadingText = 'Checking files…';\n\n  /**\n   * Will be used by state = UploadFileState.UPLOAD_FAILED\n   */\n  @Prop() uploadFailedText = 'Upload failed. Please try again.';\n\n  /**\n   * Will be used by state = UploadFileState.UPLOAD_SUCCESSED\n   */\n  @Prop() uploadSuccessText = 'Upload successful';\n\n  /**\n   * Label for upload file button\n   */\n  @Prop() i18nUploadFile = 'Upload file…';\n\n  /**\n   * Text for disabled state\n   */\n  @Prop() i18nUploadDisabled = 'File upload currently not possible.';\n\n  /**\n   * You get an array of Files after drop-action or browse action is finished\n   */\n  @Event() filesChanged: EventEmitter<Array<File>>;\n\n  @Element() hostElement!: HTMLIxUploadElement;\n\n  get inputElement(): HTMLInputElement {\n    return this.hostElement.shadowRoot.querySelector('#upload-browser');\n  }\n\n  @State() isFileOver = false;\n\n  private filesToUpload: Array<File>;\n\n  constructor() {}\n\n  private fileDropped(evt: DragEvent) {\n    evt.preventDefault();\n    if (this.disabled) {\n      return;\n    }\n\n    const file: File | FileList = evt.dataTransfer.files;\n    this.isFileOver = false;\n\n    this.filesToUpload = this.convertToFileArray(file);\n    this.filesChanged.emit(this.filesToUpload);\n  }\n\n  private fileOver(event: DragEvent) {\n    if (this.state !== UploadFileState.LOADING) {\n      event.preventDefault();\n      event.dataTransfer.dropEffect = 'move';\n    }\n\n    if (!this.multiple && event.dataTransfer.items.length > 1) {\n      event.preventDefault();\n      event.stopPropagation();\n      event.dataTransfer.effectAllowed = 'none';\n      event.dataTransfer.dropEffect = 'none';\n    } else {\n      this.isFileOver = true;\n    }\n  }\n\n  private fileLeave() {\n    this.isFileOver = false;\n  }\n\n  private fileChangeEvent(event: any) {\n    if (this.disabled) {\n      return;\n    }\n    this.filesToUpload = this.convertToFileArray(event.target.files);\n\n    this.filesChanged.emit(this.filesToUpload);\n\n    // Workaround for bug in native input element, that prevents the user from uploading\n    // a file with the same name as the most recent one, but with changed content.\n    this.inputElement.type = '';\n    this.inputElement.type = 'file';\n  }\n\n  private convertToFileArray(filesFromEvent: FileList | File): File[] {\n    let files = [];\n    if (filesFromEvent instanceof FileList) {\n      files = Array.from(filesFromEvent);\n    } else {\n      files = [filesFromEvent];\n    }\n    return files;\n  }\n\n  private renderUploadState() {\n    if (this.disabled) {\n      return (\n        <span class=\"state\">\n          <span class=\"upload-text\">{this.i18nUploadDisabled}</span>\n        </span>\n      );\n    }\n\n    switch (this.state) {\n      case UploadFileState.SELECT_FILE:\n        return (\n          <span class=\"state\">\n            <span class=\"upload-text\">{this.selectFileText}</span>\n          </span>\n        );\n      case UploadFileState.LOADING:\n        return (\n          <span class=\"state\">\n            <ix-spinner variant=\"primary\"></ix-spinner>\n            <span class=\"upload-text\">{this.loadingText}</span>\n          </span>\n        );\n      case UploadFileState.UPLOAD_FAILED:\n        return (\n          <span class=\"state\">\n            <ix-icon name=\"error\" class=\"icon-error\"></ix-icon>\n            <span class=\"upload-text\">{this.uploadFailedText}</span>\n          </span>\n        );\n      case UploadFileState.UPLOAD_SUCCESSED:\n        return (\n          <span class=\"state\">\n            <ix-icon name=\"success\" class=\"icon-success\"></ix-icon>\n            <span class=\"upload-text\">{this.uploadSuccessText}</span>\n          </span>\n        );\n      default:\n        return '';\n    }\n  }\n\n  /**\n   * Set files\n   * @param obj\n   */\n  @Method()\n  async setFilesToUpload(obj: any) {\n    this.filesToUpload = obj;\n  }\n\n  render() {\n    return (\n      <Host>\n        <div\n          class={{\n            'file-upload-area': true,\n            'file-over':\n              this.state !== UploadFileState.LOADING && this.isFileOver,\n            checking: this.state === UploadFileState.LOADING,\n            disabled: this.disabled,\n            multiline: this.multiline,\n          }}\n          onDrop={(e) => {\n            if (this.state !== UploadFileState.LOADING) {\n              this.fileDropped(e);\n            }\n          }}\n          onDragOver={(e) => this.fileOver(e)}\n          onDragLeave={() => this.fileLeave()}\n          draggable={!this.disabled}\n        >\n          {this.renderUploadState()}\n          <div>\n            <input\n              multiple={this.multiple}\n              type=\"file\"\n              class=\"upload-browser\"\n              id=\"upload-browser\"\n              onChange={(e) => {\n                this.fileChangeEvent(e);\n              }}\n              accept={this.accept}\n            />\n            <ix-button\n              tabindex=\"-1\"\n              outline\n              onClick={() => this.inputElement.click()}\n              disabled={this.disabled || this.state === UploadFileState.LOADING}\n            >\n              {this.i18nUploadFile}\n            </ix-button>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}