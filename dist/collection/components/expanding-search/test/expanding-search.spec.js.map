{"version":3,"file":"expanding-search.spec.js","sourceRoot":"","sources":["../../../../src/components/expanding-search/test/expanding-search.spec.tsx"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AAEH,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AAEtD,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,IAAI,IAAS,CAAC;IACd,IAAI,eAA6C,CAAC;IAClD,IAAI,KAAU,CAAC;IAEf,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,IAAI,GAAG,MAAM,WAAW,CAAC;YACvB,UAAU,EAAE,CAAC,eAAe,CAAC;YAC7B,IAAI,EAAE,6CAA6C;SACpD,CAAC,CAAC;QACH,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;QAChE,eAAe,CAAC,UAAU,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC;QACnE,KAAK,GAAG,eAAe,CAAC,UAAU,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC;QAC1E,eAAe,CAAC,UAAU,CAAC,aAAa,CAAC,+BAA+B,CAAC,CAAC;QAC1E,eAAe,CAAC,UAAU,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;QACjE,IAAI,WAAW,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAC5B,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;QAEtD,SAAS,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC;QAC3D,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,CAAC,WAAW,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACvC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { newSpecPage } from '@stencil/core/testing';\nimport { fireEvent } from '@testing-library/dom';\nimport { ExpandingSearch } from '../expanding-search';\n\ndescribe('ix-expanding-search', () => {\n  let page: any;\n  let expandingSearch: HTMLIxExpandingSearchElement;\n  let input: any;\n\n  beforeEach(async () => {\n    page = await newSpecPage({\n      components: [ExpandingSearch],\n      html: '<ix-expanding-search></ix-expanding-search>',\n    });\n    expandingSearch = page.doc.querySelector('ix-expanding-search');\n    expandingSearch.shadowRoot.querySelector('[data-testid=\"button\"]');\n    input = expandingSearch.shadowRoot.querySelector('[data-testid=\"input\"]');\n    expandingSearch.shadowRoot.querySelector('[data-testid=\"input-wrapper\"]');\n    expandingSearch.shadowRoot.querySelector('input').focus = jest.fn();\n  });\n\n  it(\"emits an event on change and returns 'this.value'\", async () => {\n    let callbackSpy = jest.fn();\n    page.win.addEventListener('valueChange', callbackSpy);\n\n    fireEvent.input(input, { target: { value: 'new input' } });\n    await page.waitForChanges();\n\n    expect(callbackSpy).toHaveBeenCalled();\n    expect(callbackSpy.mock.calls[0][0].detail).toEqual(expandingSearch.value);\n  });\n});\n"]}