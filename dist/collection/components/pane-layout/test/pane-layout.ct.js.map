{"version":3,"file":"pane-layout.ct.js","sourceRoot":"","sources":["../../../../../src/components/pane-layout/test/pane-layout.ct.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AAEH,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAC;AAEnC,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE;IACxC,MAAM,KAAK,CAAC,mCAAmC,CAAC,CAAC;IACjD,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAC5C,MAAM,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;IACnD,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE;QAClC,MAAM,KAAK,CACT;;;;;;;;;;;;;;;;;;;;;;;OAuBC,CACF,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;QAClC,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QACjC,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjC,mDAAmD;QACnD,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAChC,MAAM,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,uCAAuC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;QAC/D,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QACjC,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,CAAC;QACvC,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACzC,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { expect } from '@playwright/test';\nimport { test } from '@utils/test';\n\ntest('renders', async ({ mount, page }) => {\n  await mount(`<ix-pane-layout></ix-pane-layout>`);\n  const pane = page.locator('ix-pane-layout');\n  await expect(pane).toHaveClass(/hydrated/);\n});\n\ntest.describe('pane-layout with floating pane', () => {\n  test.beforeEach(async ({ mount }) => {\n    await mount(\n      `\n        <div style=\"width: 100vw; height: 100vh;\">\n          <ix-pane-layout variant=\"floating\">\n            <ix-pane\n              heading=\"LEFT\"\n              slot=\"left\"\n              icon=\"star\"\n              expanded=\"true\"\n              size=\"240px\"\n              hide-on-collapse\n            >\n              <h1>Test Heading</h1>\n            </ix-pane>\n            <div slot=\"content\" style=\"width: 100%; height: 100%; display: flex; flex-direction: row;\">\n              <div style=\"width: 200px; height: 100%;\">\n                <p>Text 1</p>\n              </div>\n              <div style=\"width: 200px; height: 100%; margin-left: 100px;\">\n                <p>Text 2</p>\n              </div>\n            </div>\n          </ix-pane-layout>\n        </div>\n      `\n    );\n  });\n\n  test('expanded', async ({ page }) => {\n    await page.waitForSelector('h1');\n    const title = page.locator('h1');\n    // timeout to make sure it is currently not closing\n    await page.waitForTimeout(1000);\n    await expect(title).toBeVisible();\n  });\n\n  test('floating pane closes on content click', async ({ page }) => {\n    await page.waitForSelector('h1');\n    await page.getByText('Text 2').click();\n    const textOne = page.getByText('Text 1');\n    await expect(textOne).toBeVisible();\n  });\n});\n"]}