{"version":3,"file":"ix-typography.spec.js","sourceRoot":"","sources":["../../../../../src/components/typography/test/ix-typography.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAE7C,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;QACvB,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,gDAAgD;SACvD,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;KAO7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;QACnC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,6DAA6D;SACpE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;KAO7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oBAAoB,EAAE,KAAK,IAAI,EAAE;QAClC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,oEAAoE;SAC3E,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;KAO7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,4EAA4E;SACnF,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;KAO7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,6DAA6D;SACpE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;KAO7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { IxTypography } from '../typography';\n\ndescribe('ix-typography', () => {\n  it('renders', async () => {\n    const page = await newSpecPage({\n      components: [IxTypography],\n      html: `<ix-typography>Example content</ix-typography>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <ix-typography class=\"typography-body\">\n        <mock:shadow-root>\n          <slot></slot>\n        </mock:shadow-root>\n        Example content\n      </ix-typography>\n    `);\n  });\n\n  it('should render color', async () => {\n    const page = await newSpecPage({\n      components: [IxTypography],\n      html: `<ix-typography color=\"soft\">Example content</ix-typography>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <ix-typography color=\"soft\" class=\"typography-body\" style=\"color: var(--theme-color-soft-text);\">\n        <mock:shadow-root>\n          <slot></slot>\n        </mock:shadow-root>\n        Example content\n      </ix-typography>\n    `);\n  });\n\n  it('should show format', async () => {\n    const page = await newSpecPage({\n      components: [IxTypography],\n      html: `<ix-typography format=\"display-xl\">Example content</ix-typography>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <ix-typography class=\"typography-display-xl\" format=\"display-xl\">\n        <mock:shadow-root>\n          <slot></slot>\n        </mock:shadow-root>\n        Example content\n      </ix-typography>\n    `);\n  });\n\n  it('should show text decoration', async () => {\n    const page = await newSpecPage({\n      components: [IxTypography],\n      html: `<ix-typography text-decoration=\"underline\">Example content</ix-typography>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <ix-typography class=\"typography-body typography-decoration-underline\" text-decoration=\"underline\">\n        <mock:shadow-root>\n          <slot></slot>\n        </mock:shadow-root>\n        Example content\n      </ix-typography>\n    `);\n  });\n\n  it('should provide fallback', async () => {\n    const page = await newSpecPage({\n      components: [IxTypography],\n      html: `<ix-typography variant=\"h2\">Example content</ix-typography>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <ix-typography variant=\"h2\" class=\"text-h2\">\n        <mock:shadow-root>\n          <slot></slot>\n        </mock:shadow-root>\n        Example content\n      </ix-typography>\n    `);\n  });\n});\n"]}