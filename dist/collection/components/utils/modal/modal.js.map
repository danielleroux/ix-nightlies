{"version":3,"file":"modal.js","sourceRoot":"","sources":["../../../../../src/components/utils/modal/modal.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { IxModalSize } from '../../modal/modal';\nimport { getCoreDelegate, resolveDelegate } from '../delegate';\nimport { TypedEvent } from '../typed-event';\n\nexport function setA11yAttributes(element: HTMLElement, config: ModalConfig) {\n  const ariaDescribedby = config.ariaDescribedby;\n  const ariaLabelledby = config.ariaLabelledby;\n\n  delete config['ariaDescribedby'];\n  delete config['ariaLabelledby'];\n\n  if (ariaDescribedby) {\n    element.setAttribute('aria-describedby', ariaDescribedby);\n  }\n\n  if (ariaLabelledby) {\n    element.setAttribute('aria-labelledby', ariaLabelledby);\n  }\n}\n\nexport interface ModalConfig<TReason = any, CONTENT = any> {\n  animation?: boolean;\n  ariaDescribedby?: string;\n  ariaLabelledby?: string;\n  backdrop?: boolean;\n  closeOnBackdropClick?: boolean;\n  beforeDismiss?: (reason?: TReason) => boolean | Promise<boolean>;\n  centered?: boolean;\n  container?: string | HTMLElement;\n  content: CONTENT | string;\n  keyboard?: boolean;\n  size?: IxModalSize;\n  title?: string;\n}\n\nexport interface ModalInstance<TReason = any> {\n  htmlElement: HTMLIxModalElement;\n  onClose: TypedEvent<TReason>;\n  onDismiss: TypedEvent<TReason>;\n}\n\nfunction getIxModal(element: Element) {\n  return element.closest('ix-modal');\n}\n\nexport function closeModal<TClose = any>(\n  element: Element,\n  closeResult: TClose\n) {\n  const dialog = getIxModal(element);\n  if (dialog) {\n    dialog.closeModal(closeResult);\n    return;\n  }\n}\n\nexport function dismissModal(element: Element, dismissResult?: any) {\n  const dialog = getIxModal(element);\n  if (dialog) {\n    dialog.dismissModal(dismissResult);\n    return;\n  }\n}\n\nexport async function showModal<T>(\n  config: ModalConfig<T>\n): Promise<ModalInstance<T>> {\n  const delegate = resolveDelegate();\n  let dialogRef: HTMLIxModalElement;\n  const onClose = new TypedEvent<T>();\n  const onDismiss = new TypedEvent<T>();\n\n  if (typeof config.content === 'string') {\n    const dialog = document.createElement('ix-modal');\n    dialog.innerText = config.content;\n    dialogRef = await getCoreDelegate().attachView(dialog);\n  }\n\n  if (\n    config.content instanceof HTMLElement &&\n    config.content.tagName !== 'IX-MODAL'\n  ) {\n    const dialog = document.createElement('ix-modal');\n    dialog.appendChild(config.content);\n    dialogRef = await getCoreDelegate().attachView(dialog);\n  }\n  if (!dialogRef) {\n    dialogRef = await delegate.attachView<HTMLIxModalElement>(config.content);\n  }\n\n  setA11yAttributes(dialogRef, config);\n  Object.assign(dialogRef, config);\n\n  await dialogRef.showModal();\n  dialogRef.addEventListener('dialogClose', async ({ detail }: CustomEvent) => {\n    onClose.emit(detail);\n    await delegate.removeView(dialogRef);\n  });\n\n  dialogRef.addEventListener(\n    'dialogDismiss',\n    async ({ detail }: CustomEvent) => {\n      onDismiss.emit(detail);\n      await delegate.removeView(dialogRef);\n    }\n  );\n\n  return {\n    htmlElement: dialogRef,\n    onClose,\n    onDismiss,\n  };\n}\n"]}