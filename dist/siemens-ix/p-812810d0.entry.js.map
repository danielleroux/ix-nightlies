{"version":3,"names":["selectCss","IxSelectStyle0","Select","items","Array","from","this","hostElement","querySelectorAll","shadowRoot","selectedItems","filter","item","selected","addItemButton","querySelector","isSingleMode","mode","isMultipleMode","isEveryDropdownItemHidden","every","classList","contains","watchSelectedIndices","value","updateSelection","watchValue","selectedIndices","onItemClicked","event","newId","detail","itemClick","toggleValue","emitValueChange","emitAddItem","trim","newItem","document","createElement","label","addItemRef","appendChild","clearInput","addItem","emit","itemValue","isArray","includes","ids","forEach","some","i","selectedLabels","map","inputValue","_a","length","valueChange","itemSelectionChange","componentDidLoad","inputRef","addEventListener","dropdownShow","inputChange","componentWillLoad","onLabelChange","preventDefault","stopImmediatePropagation","disconnectedCallback","labelMutationObserver","disconnect","itemExists","find","dropdownVisibilityChanged","hasFocus","focus","select","removeHiddenFromItems","isDropdownEmpty","navigationItem","undefined","onKeyDown","code","onArrowNavigation","onEnterNavigation","editable","inputFilterText","onItemClick","_b","dropdownRef","updatePosition","key","stopPropagation","applyFocusTo","indexOfNavigationItem","findIndex","newFocusItem","element","setTimeout","filterItemsWithTypeahead","remove","toLowerCase","add","clear","onInputBlur","e","target","placeholderValue","i18nPlaceholderEditable","readonly","i18nPlaceholder","isAddItemVisible","render","h","Host","class","disabled","ref","dropdownAnchor","dropdownWrapperRef","onCloseClick","autocomplete","readOnly","type","allowClear","placeholder","onBlur","onFocus","onInput","_c","icon","ghost","oval","size","onClick","show","closeBehavior","anchor","trigger","onShowChanged","placement","overwriteDropdownStyle","async","minWidth","clientWidth","hidden","hideListHeader","title","i18nSelectListHeader","i18nNoMatches","__decorate","OnListener","self"],"sources":["src/components/select/select.scss?tag=ix-select&encapsulation=shadow","src/components/select/select.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n@import 'common-variables';\n@import 'legacy/mixins/fonts';\n@import 'mixins/hover';\n@import 'mixins/text-truncation';\n@import 'mixins/shadow-dom/component';\n\n:host {\n  @include ix-component;\n\n  display: inline-block;\n  position: relative;\n  min-height: 2rem;\n  height: auto;\n  border-radius: var(--theme-input--border-radius);\n\n  .d-none {\n    display: none;\n  }\n\n  .select {\n    position: relative;\n    display: flex;\n    align-items: center;\n    background-color: var(--theme-input--background);\n    border: var(--theme-input--border-thickness) solid\n      var(--theme-input--border-color);\n    border-radius: var(--theme-input--border-radius);\n    padding: 0 0 0 $small-space;\n    box-shadow: var(--theme-inset-shadow-1) !important;\n\n    @include hover {\n      background-color: var(--theme-input--background--hover);\n      border-color: var(--theme-input--border-color--hover);\n    }\n\n    &:focus-within {\n      background-color: var(--theme-input--background--focus);\n      border-color: var(--theme-input--border-color--focus);\n      outline: 1px solid #119fff;\n      outline-offset: var(--theme-input--focus--outline-offset);\n    }\n  }\n\n  .select.readonly {\n    box-shadow: none !important;\n    border: none;\n    border-radius: 0px;\n    border-bottom: var(--theme-input--border-thickness) solid\n      var(--theme-color-weak-bdr);\n\n    &,\n    &:hover,\n    &:active {\n      background-color: transparent !important;\n    }\n\n    &:focus,\n    &:focus-within,\n    &:focus-visible {\n      outline: none;\n    }\n\n    input {\n      color: var(--theme-color-weak-text);\n    }\n\n    input:focus,\n    input:focus-visible {\n      outline: none;\n    }\n  }\n\n  .hidden {\n    display: none !important;\n  }\n\n  .trigger {\n    display: flex;\n    align-items: center;\n    flex-grow: 1;\n    height: 100%;\n  }\n\n  .input-container {\n    display: flex;\n    position: relative;\n    align-items: flex-start;\n    width: 100%;\n    height: 100%;\n\n    .chips {\n      position: relative;\n      display: flex;\n      align-items: center;\n      flex-wrap: wrap;\n      height: 100%;\n      max-height: 3.5rem;\n      flex-grow: 1;\n      overflow-y: auto;\n\n      > ix-filter-chip {\n        margin: 0.1rem;\n      }\n    }\n\n    input {\n      @include ellipsis;\n      @include text-default;\n      background: transparent;\n      height: 1.75rem;\n      width: 100%;\n\n      &,\n      &:hover,\n      &:focus-visible {\n        border: none;\n        outline: none;\n      }\n\n      &::placeholder {\n        color: var(--theme-input-select-icon--color);\n      }\n\n      &.hide-placeholder::placeholder {\n        opacity: 0;\n      }\n    }\n  }\n\n  .dropdown-visible {\n    --ix-icon-button-color: var(--theme-color-dynamic--hover);\n  }\n\n  .add-item {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    position: relative;\n    width: 100%;\n  }\n\n  .select-list-header {\n    @include ellipsis;\n    display: flex;\n    align-items: center;\n    height: $default-control-height;\n    color: var(--theme-select-list-item-hint--color);\n    margin: 0 $small-space 0 1rem;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\nimport { IxSelectItemLabelChangeEvent } from '../select-item/events';\nimport { OnListener } from '../utils/listener';\n\n@Component({\n  tag: 'ix-select',\n  styleUrl: 'select.scss',\n  shadow: true,\n})\nexport class Select {\n  @Element() hostElement!: HTMLIxSelectElement;\n\n  /**\n   * Indices of selected items.\n   * This corresponds to the value property of ix-select-items and therefor not necessarily the indices of the items in the list.\n   * @deprecated since 2.0.0. Use the `value` property instead.\n   */\n  @Prop({ mutable: true }) selectedIndices?: string | string[];\n\n  /**\n   * Current selected value.\n   * This corresponds to the value property of ix-select-items\n   * @since 2.0.0\n   */\n  @Prop({ mutable: true }) value?: string | string[];\n\n  /**\n   * Show clear button\n   */\n  @Prop() allowClear = false;\n\n  /**\n   * Selection mode\n   */\n  @Prop() mode: 'single' | 'multiple' = 'single';\n\n  /**\n   * Select is extendable\n   */\n  @Prop() editable = false;\n\n  /**\n   * If true the select will be in disabled state\n   */\n  @Prop() disabled = false;\n\n  /**\n   * If true the select will be in readonly mode\n   */\n  @Prop() readonly = false;\n\n  /**\n   * Input field placeholder\n   */\n  @Prop() i18nPlaceholder = 'Select an option';\n\n  /**\n   * Input field placeholder for editable select\n   */\n  @Prop() i18nPlaceholderEditable = 'Type of select option';\n\n  /**\n   * Select list header\n   */\n  @Prop() i18nSelectListHeader = 'Please select an option';\n\n  /**\n   * Hint inside of dropdown if no items where found with current filter text\n   *\n   * @since 1.5.0\n   */\n  @Prop() i18nNoMatches = 'No matches';\n\n  /**\n   * Hide list header\n   *\n   * @since 1.5.0\n   */\n  @Prop() hideListHeader = false;\n\n  /**\n   * Value changed\n   * @since 2.0.0\n   */\n  @Event() valueChange: EventEmitter<string | string[]>;\n\n  /**\n   * Item selection changed\n   * @deprecated since 2.0.0. Use `valueChange` instead.\n   */\n  @Event() itemSelectionChange: EventEmitter<string[]>;\n\n  /**\n   * Event dispatched whenever the text input changes.\n   *\n   * @since 2.0.0\n   */\n  @Event() inputChange: EventEmitter<string>;\n\n  /**\n   * Item added to selection\n   */\n  @Event() addItem: EventEmitter<string>;\n\n  @State() dropdownShow = false;\n  @State() selectedLabels: string[];\n  @State() dropdownWrapperRef!: HTMLElement;\n  @State() dropdownAnchor!: HTMLElement;\n  @State() isDropdownEmpty = false;\n  @State() hasFocus = false;\n  @State() navigationItem: HTMLIxSelectItemElement;\n  @State() inputFilterText: string;\n  @State() inputValue: string;\n\n  private inputRef!: HTMLInputElement;\n  private dropdownRef!: HTMLIxDropdownElement;\n  private addItemRef!: HTMLDivElement;\n\n  private labelMutationObserver: MutationObserver;\n\n  get items() {\n    return [\n      ...Array.from(this.hostElement.querySelectorAll('ix-select-item')),\n      ...Array.from(\n        this.hostElement.shadowRoot.querySelectorAll('ix-select-item')\n      ),\n    ];\n  }\n\n  get selectedItems() {\n    return this.items.filter((item) => item.selected);\n  }\n\n  get addItemButton() {\n    return this.hostElement.shadowRoot.querySelector('.add-item');\n  }\n\n  get isSingleMode() {\n    return this.mode === 'single';\n  }\n\n  get isMultipleMode() {\n    return this.mode === 'multiple';\n  }\n\n  get isEveryDropdownItemHidden() {\n    return this.items.every((item) => item.classList.contains('d-none'));\n  }\n\n  @Watch('selectedIndices')\n  watchSelectedIndices(value: string | string[]) {\n    this.value = value;\n    this.updateSelection();\n  }\n\n  @Watch('value')\n  watchValue(value: string | string[]) {\n    this.selectedIndices = value;\n    this.updateSelection();\n  }\n\n  @Listen('itemClick')\n  onItemClicked(event: CustomEvent<string>) {\n    const newId = event.detail;\n    this.itemClick(newId);\n  }\n\n  private itemClick(newId: string) {\n    this.value = this.toggleValue(newId);\n    this.updateSelection();\n    this.emitValueChange();\n  }\n\n  private emitAddItem(value: string) {\n    if (value.trim() === '') {\n      return;\n    }\n\n    const newItem = document.createElement('ix-select-item');\n    newItem.value = value;\n    newItem.label = value;\n\n    this.addItemRef.appendChild(newItem);\n\n    this.clearInput();\n    this.itemClick(value);\n    this.addItem.emit(value);\n  }\n\n  private toggleValue(itemValue: string) {\n    if (!this.isMultipleMode) {\n      return itemValue;\n    }\n\n    if (!this.value) {\n      return [itemValue];\n    }\n\n    let value = this.value;\n\n    if (!Array.isArray(value)) {\n      value = [value];\n    }\n\n    if (value.includes(itemValue)) {\n      return value.filter((value) => value !== itemValue);\n    } else {\n      return [...value, itemValue];\n    }\n  }\n\n  private updateSelection() {\n    let ids = [];\n\n    if (this.value) {\n      ids = Array.isArray(this.value) ? [...this.value] : [this.value];\n    }\n\n    this.items.forEach((item) => {\n      item.selected = ids.some((i) => i === item.value);\n    });\n\n    this.selectedLabels = this.selectedItems.map((item) => item.label);\n\n    if (this.isSingleMode) {\n      this.inputValue = this.selectedLabels?.length\n        ? this.selectedLabels[0]\n        : null;\n      return;\n    }\n\n    this.inputValue = null;\n  }\n\n  private emitValueChange() {\n    this.valueChange.emit(this.value);\n\n    if (!this.value) {\n      this.itemSelectionChange.emit(null);\n    } else {\n      this.itemSelectionChange.emit(\n        Array.isArray(this.value) ? this.value : [this.value]\n      );\n    }\n  }\n\n  componentDidLoad() {\n    this.inputRef.addEventListener('input', () => {\n      this.dropdownShow = true;\n      this.inputChange.emit(this.inputRef.value);\n    });\n  }\n\n  componentWillLoad() {\n    if (this.selectedIndices && !this.value) {\n      this.value = this.selectedIndices;\n    }\n\n    this.updateSelection();\n  }\n\n  @Listen('ix-select-item:labelChange')\n  onLabelChange(event: IxSelectItemLabelChangeEvent) {\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    this.updateSelection();\n  }\n\n  disconnectedCallback() {\n    if (this.labelMutationObserver) {\n      this.labelMutationObserver.disconnect();\n    }\n  }\n\n  private itemExists(item: string) {\n    return this.items.find((i) => i.label === item);\n  }\n\n  private dropdownVisibilityChanged(event: CustomEvent<boolean>) {\n    this.dropdownShow = event.detail;\n    this.hasFocus = event.detail;\n\n    if (event.detail) {\n      this.inputRef.focus();\n      this.inputRef.select();\n\n      this.removeHiddenFromItems();\n      this.isDropdownEmpty = this.isEveryDropdownItemHidden;\n    } else {\n      this.navigationItem = undefined;\n    }\n  }\n\n  @OnListener<Select>('keydown', (self) => self.dropdownShow)\n  async onKeyDown(event: KeyboardEvent) {\n    if (event.code === 'ArrowDown' || event.code === 'ArrowUp') {\n      this.onArrowNavigation(event, event.code);\n    }\n\n    if (!this.dropdownShow) {\n      return;\n    }\n\n    if (event.code === 'Enter' || event.code === 'NumpadEnter') {\n      await this.onEnterNavigation();\n    }\n\n    if (event.code === 'Escape') {\n      this.dropdownShow = false;\n    }\n  }\n\n  private async onEnterNavigation() {\n    if (this.isMultipleMode) {\n      return;\n    }\n\n    if (this.editable && !this.itemExists(this.inputFilterText)) {\n      this.emitAddItem(this.inputFilterText);\n      this.navigationItem = this.items[this.items.length - 1];\n    }\n\n    this.navigationItem?.onItemClick();\n    await this.dropdownRef?.updatePosition();\n\n    if (this.isSingleMode && !this.editable) {\n      this.dropdownShow = false;\n    }\n  }\n\n  private onArrowNavigation(\n    event: KeyboardEvent,\n    key: 'ArrowDown' | 'ArrowUp'\n  ) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.dropdownShow = true;\n\n    const items = this.items.filter((i) => !i.classList.contains('d-none'));\n    if (this.navigationItem === undefined) {\n      this.applyFocusTo(items[0]);\n      return;\n    }\n\n    let indexOfNavigationItem = items.findIndex(\n      (item) => item === this.navigationItem\n    );\n\n    if (key === 'ArrowDown') {\n      indexOfNavigationItem++;\n    } else {\n      indexOfNavigationItem--;\n    }\n\n    const newFocusItem = items[indexOfNavigationItem];\n    this.applyFocusTo(newFocusItem);\n  }\n\n  private applyFocusTo(element: HTMLIxSelectItemElement) {\n    if (!element) {\n      return;\n    }\n    this.navigationItem = element;\n\n    setTimeout(() => {\n      element.shadowRoot\n        .querySelector('ix-dropdown-item')\n        .shadowRoot.querySelector('button')\n        .focus();\n    });\n  }\n\n  private filterItemsWithTypeahead() {\n    this.inputFilterText = this.inputRef.value;\n\n    if (this.isSingleMode && this.inputFilterText === this.selectedLabels[0]) {\n      return;\n    }\n\n    if (this.inputFilterText) {\n      this.items.forEach((item) => {\n        item.classList.remove('d-none');\n        if (\n          !item.label.toLowerCase().includes(this.inputFilterText.toLowerCase())\n        ) {\n          item.classList.add('d-none');\n        }\n      });\n    } else {\n      this.removeHiddenFromItems();\n    }\n\n    this.isDropdownEmpty = this.isEveryDropdownItemHidden;\n  }\n\n  private removeHiddenFromItems() {\n    this.items.forEach((item) => {\n      item.classList.remove('d-none');\n    });\n  }\n\n  private clearInput() {\n    this.inputRef.value = '';\n    this.inputFilterText = '';\n  }\n\n  private clear() {\n    this.clearInput();\n    this.selectedLabels = [];\n    this.value = [];\n    this.valueChange.emit(null);\n    this.dropdownShow = false;\n  }\n\n  private onInputBlur(e) {\n    if (this.editable) {\n      return;\n    }\n\n    if (this.isSingleMode) {\n      return;\n    }\n\n    if (!this.dropdownShow && this.mode !== 'multiple') {\n      e.target['value'] = this.selectedLabels;\n    }\n  }\n\n  private placeholderValue() {\n    if (this.editable) {\n      return this.i18nPlaceholderEditable;\n    }\n\n    if (this.readonly) {\n      return '';\n    }\n\n    return this.i18nPlaceholder;\n  }\n\n  private isAddItemVisible() {\n    return (\n      !this.itemExists(this.inputFilterText) &&\n      this.editable &&\n      this.inputFilterText\n    );\n  }\n\n  render() {\n    return (\n      <Host>\n        <div\n          class={{\n            select: true,\n            disabled: this.disabled,\n            readonly: this.readonly,\n          }}\n          ref={(ref) => {\n            this.dropdownAnchor = ref;\n            if (!this.editable) this.dropdownWrapperRef = ref;\n          }}\n        >\n          <div class=\"input-container\">\n            <div class=\"chips\">\n              {this.isMultipleMode\n                ? this.selectedItems?.map((item) => (\n                    <ix-filter-chip\n                      disabled={this.disabled || this.readonly}\n                      key={item.value}\n                      onCloseClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        this.itemClick(item.value);\n                      }}\n                    >\n                      {item.label}\n                    </ix-filter-chip>\n                  ))\n                : ''}\n              <div class=\"trigger\">\n                <input\n                  autocomplete=\"off\"\n                  data-testid=\"input\"\n                  disabled={this.disabled}\n                  readOnly={this.readonly}\n                  type=\"text\"\n                  class={{\n                    'allow-clear':\n                      this.allowClear && !!this.selectedLabels?.length,\n                  }}\n                  placeholder={this.placeholderValue()}\n                  value={this.inputValue}\n                  ref={(ref) => (this.inputRef = ref)}\n                  onBlur={(e) => this.onInputBlur(e)}\n                  onFocus={() => {\n                    this.navigationItem = undefined;\n                  }}\n                  onInput={() => this.filterItemsWithTypeahead()}\n                  onKeyDown={(e) => this.onKeyDown(e)}\n                />\n                {this.allowClear &&\n                (this.selectedLabels?.length || this.inputFilterText) ? (\n                  <ix-icon-button\n                    class=\"clear\"\n                    icon={'clear'}\n                    ghost\n                    oval\n                    size=\"16\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      this.clear();\n                    }}\n                  />\n                ) : null}\n                {this.disabled || this.readonly ? null : (\n                  <ix-icon-button\n                    data-select-dropdown\n                    class={{ 'dropdown-visible': this.dropdownShow }}\n                    icon=\"chevron-down-small\"\n                    ghost\n                    ref={(ref) => {\n                      if (this.editable) this.dropdownWrapperRef = ref;\n                    }}\n                  ></ix-icon-button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        <ix-dropdown\n          ref={(ref) => (this.dropdownRef = ref)}\n          show={this.dropdownShow}\n          closeBehavior={this.isMultipleMode ? 'outside' : 'both'}\n          class={{\n            'd-none': this.disabled || this.readonly,\n          }}\n          anchor={this.dropdownAnchor}\n          trigger={this.dropdownWrapperRef}\n          onShowChanged={(e) => this.dropdownVisibilityChanged(e)}\n          placement=\"bottom-start\"\n          overwriteDropdownStyle={async () => {\n            return {\n              minWidth: `${this.hostElement.clientWidth}px`,\n            };\n          }}\n        >\n          <div\n            class={{\n              'select-list-header': true,\n              hidden: this.hideListHeader || this.isDropdownEmpty,\n            }}\n            title={this.i18nSelectListHeader}\n          >\n            {this.i18nSelectListHeader}\n          </div>\n          <slot></slot>\n          <div ref={(ref) => (this.addItemRef = ref)} class=\"d-contents\"></div>\n          {this.isAddItemVisible() ? (\n            <ix-dropdown-item\n              data-testid=\"add-item\"\n              icon={'plus'}\n              class={{\n                'add-item': true,\n              }}\n              label={this.inputFilterText}\n              onItemClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                this.emitAddItem(this.inputFilterText);\n              }}\n            ></ix-dropdown-item>\n          ) : null}\n          {this.isDropdownEmpty && !this.editable ? (\n            <div class=\"select-list-header\">{this.i18nNoMatches}</div>\n          ) : (\n            ''\n          )}\n        </ix-dropdown>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}