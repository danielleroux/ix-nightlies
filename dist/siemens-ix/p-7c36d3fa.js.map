{"version":3,"names":["createContext","name","initialValue","ContextEvent","Event","constructor","context","callback","subscribe","super","bubbles","composed","this","useContextConsumer","hostElement","onContextReceived","_unsubscribe","dispatchEvent","ctx","unSub","unsubscribe","useContextProvider","contextPayload","requestContext","TypedEvent","updateContext","requests","Set","addEventListener","requestContextEvent","stopPropagation","add","emit","delete","on","forEach","r","closestIxMenu","element","menuElement","closest","ApplicationLayoutContext","hideHeader","host","sidebar"],"sources":["src/components/utils/context.ts","src/components/utils/application-layout/context.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { TypedEvent } from './typed-event';\n\n/**\n * A Context object defines an optional initial value for a Context, as well as a name identifier for debugging purposes.\n */\nexport type Context<T> = {\n  name: string;\n  initialValue?: T;\n};\n\n/**\n * An unknown context type\n */\nexport type UnknownContext = Context<unknown>;\n\n/**\n * A helper type which can extract a Context value type from a Context type\n */\nexport type ContextType<T extends UnknownContext> = T extends Context<infer Y>\n  ? Y\n  : never;\n\n/**\n * A function which creates a Context value object\n */\nexport function createContext<T>(\n  name: string,\n  initialValue?: T\n): Readonly<Context<T>> {\n  return {\n    name,\n    initialValue,\n  };\n}\n\n/**\n * A callback which is provided by a context requester and is called with the value satisfying the request.\n * This callback can be called multiple times by context providers as the requested value is changed.\n */\nexport type ContextCallback<ValueType> = (\n  value: ValueType,\n  unsubscribe?: () => void\n) => void;\n\n/**\n * An event fired by a context requester to signal it desires a named context.\n *\n * A provider should inspect the `context` property of the event to determine if it has a value that can\n * satisfy the request, calling the `callback` with the requested value if so.\n *\n * If the requested context event contains a truthy `subscribe` value, then a provider can call the callback\n * multiple times if the value is changed, if this is the case the provider should pass an `unsubscribe`\n * function to the callback which requesters can invoke to indicate they no longer wish to receive these updates.\n */\nexport class ContextEvent<T extends UnknownContext> extends Event {\n  public constructor(\n    public readonly context: T,\n    public readonly callback: ContextCallback<ContextType<T>>,\n    public readonly subscribe?: boolean\n  ) {\n    super('context-request', { bubbles: true, composed: true });\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    /**\n     * A 'context-request' event can be emitted by any element which desires\n     * a context value to be injected by an external provider.\n     */\n    'context-request': ContextEvent<UnknownContext>;\n  }\n}\n\nexport type ContextConsumerSubscription = {\n  unsubscribe: () => void;\n};\n\nexport function useContextConsumer<\n  T extends HTMLElement,\n  C extends UnknownContext,\n>(\n  hostElement: T,\n  context: C,\n  onContextReceived: (\n    context: ContextType<C>,\n    unsubscribe?: () => void\n  ) => void,\n  subscribe?: boolean\n): ContextConsumerSubscription {\n  let _unsubscribe: () => void;\n  hostElement.dispatchEvent(\n    new ContextEvent(\n      context,\n      (ctx, unSub) => {\n        onContextReceived(ctx, unSub);\n        _unsubscribe = unSub;\n      },\n      subscribe\n    )\n  );\n\n  return {\n    unsubscribe: () => {\n      _unsubscribe();\n    },\n  };\n}\nexport type ContextProvider<C extends Context<{}> = Context<any>> = {\n  emit: (context: ContextType<C>) => void;\n};\n\nexport function useContextProvider<\n  X extends {},\n  C extends Context<X>,\n  T extends HTMLElement = HTMLElement,\n>(\n  hostElement: T,\n  context: C,\n  contextPayload?: ContextType<C>\n): ContextProvider<C> {\n  const requestContext = new TypedEvent<ContextEvent<C>>();\n  const updateContext = new TypedEvent<ContextType<C>>();\n\n  const requests = new Set<ContextEvent<UnknownContext>>();\n\n  hostElement.addEventListener(\n    'context-request',\n    (requestContextEvent: ContextEvent<C>) => {\n      if (requestContextEvent?.context.name !== context.name) {\n        return;\n      }\n\n      requestContextEvent.stopPropagation();\n\n      if (requestContextEvent.subscribe) {\n        requests.add(requestContextEvent);\n      }\n      requestContext.emit(requestContextEvent);\n\n      if (contextPayload) {\n        requestContextEvent.callback(contextPayload, () => {\n          requests.delete(requestContextEvent);\n        });\n      }\n    }\n  );\n\n  updateContext.on((context: ContextType<C>) => {\n    requests.forEach((r) =>\n      r.callback(context, () => {\n        requests.delete(r);\n      })\n    );\n  });\n\n  return {\n    emit: (context: ContextType<C>) => {\n      updateContext.emit(context);\n    },\n  };\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { createContext } from '../context';\n\nexport const closestIxMenu = (element: Element) => {\n  const menuElement = element.closest('ix-menu');\n  return menuElement;\n};\n\nexport type AppSwitchConfigurationTarget =\n  | '_self'\n  | '_blank'\n  | '_parent'\n  | '_top'\n  | (string & {});\n\nexport type AppSwitchConfiguration = {\n  currentAppId: string;\n  apps: {\n    id: string;\n    name: string;\n    description: string;\n    url: string;\n    target: AppSwitchConfigurationTarget;\n    iconSrc: string;\n  }[];\n  i18nAppSwitch?: string;\n  i18nLoadingApps?: string;\n};\n\nexport const ApplicationLayoutContext = createContext<{\n  hideHeader: boolean;\n  host: 'basic-navigation' | 'map-navigation' | null;\n  appSwitchConfig?: AppSwitchConfiguration;\n  sidebar?: boolean;\n}>('application-layout-context', {\n  hideHeader: false,\n  host: null,\n  sidebar: false,\n});\n"],"mappings":"6CAkCgBA,EACdC,EACAC,GAEA,MAAO,CACLD,OACAC,eAEJ,C,MAqBaC,UAA+CC,MAC1D,WAAAC,CACkBC,EACAC,EACAC,GAEhBC,MAAM,kBAAmB,CAAEC,QAAS,KAAMC,SAAU,OAJpCC,KAAAN,UACAM,KAAAL,WACAK,KAAAJ,W,WAoBJK,EAIdC,EACAR,EACAS,EAIAP,GAEA,IAAIQ,EACJF,EAAYG,cACV,IAAId,EACFG,GACA,CAACY,EAAKC,KACJJ,EAAkBG,EAAKC,GACvBH,EAAeG,CAAK,GAEtBX,IAIJ,MAAO,CACLY,YAAa,KACXJ,GAAc,EAGpB,C,SAKgBK,EAKdP,EACAR,EACAgB,GAEA,MAAMC,EAAiB,IAAIC,EAC3B,MAAMC,EAAgB,IAAID,EAE1B,MAAME,EAAW,IAAIC,IAErBb,EAAYc,iBACV,mBACCC,IACC,IAAIA,IAAmB,MAAnBA,SAAmB,SAAnBA,EAAqBvB,QAAQL,QAASK,EAAQL,KAAM,CACtD,M,CAGF4B,EAAoBC,kBAEpB,GAAID,EAAoBrB,UAAW,CACjCkB,EAASK,IAAIF,E,CAEfN,EAAeS,KAAKH,GAEpB,GAAIP,EAAgB,CAClBO,EAAoBtB,SAASe,GAAgB,KAC3CI,EAASO,OAAOJ,EAAoB,G,KAM5CJ,EAAcS,IAAI5B,IAChBoB,EAASS,SAASC,GAChBA,EAAE7B,SAASD,GAAS,KAClBoB,EAASO,OAAOG,EAAE,KAErB,IAGH,MAAO,CACLJ,KAAO1B,IACLmB,EAAcO,KAAK1B,EAAQ,EAGjC,C,MC/Ja+B,EAAiBC,IAC5B,MAAMC,EAAcD,EAAQE,QAAQ,WACpC,OAAOD,CAAW,E,MAwBPE,EAA2BzC,EAKrC,6BAA8B,CAC/B0C,WAAY,MACZC,KAAM,KACNC,QAAS,e"}