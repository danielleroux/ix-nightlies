{"version":3,"names":["debounce","func","delay","timeoutId","debounced","args","clearTimeout","setTimeout","ApplicationLayoutService","constructor","_ApplicationLayoutService_supportedBreakpoints","set","this","_ApplicationLayoutService_breakpointChangeListener","TypedEvent","_ApplicationLayoutService_breakpoint","_ApplicationLayoutService_isDetectionEnabled","debouncedOnResize","onResize","bind","window","addEventListener","breakpoint","__classPrivateFieldGet","onChange","isDetectionEnabled","matchBreakpoints","breakpoints","forEach","match","matchBreakpoint","push","every","_","breakPointIndex","includes","length","emit","__classPrivateFieldSet","reverse","disableBreakpointDetection","enableBreakpointDetection","setBreakpoint","setBreakpoints","applicationLayoutService"],"sources":["src/components/utils/debounce.ts","src/components/utils/application-layout/service.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\ntype AnyFunction = (...args: any[]) => any;\n\nexport function debounce<T extends AnyFunction>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let timeoutId: ReturnType<typeof setTimeout>;\n\n  return function debounced(...args: Parameters<T>): void {\n    clearTimeout(timeoutId);\n\n    timeoutId = setTimeout(() => {\n      func(...args);\n    }, delay);\n  };\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { Breakpoint, matchBreakpoint } from '../breakpoints';\nimport { debounce } from '../debounce';\nimport { TypedEvent } from '../typed-event';\n\nclass ApplicationLayoutService {\n  // Keep order of breakpoints\n  #supportedBreakpoints: Breakpoint[] = ['sm', 'md', 'lg'];\n  #breakpointChangeListener = new TypedEvent<Breakpoint>();\n  #breakpoint: Breakpoint = 'lg';\n\n  #isDetectionEnabled = true;\n  debouncedOnResize = debounce(this.onResize.bind(this), 50);\n\n  constructor() {\n    if (typeof window !== 'undefined') {\n      window.addEventListener('resize', this.debouncedOnResize.bind(this));\n      this.debouncedOnResize();\n    }\n  }\n\n  get breakpoint() {\n    return this.#breakpoint;\n  }\n\n  get onChange() {\n    return this.#breakpointChangeListener;\n  }\n\n  get isDetectionEnabled() {\n    return this.#isDetectionEnabled;\n  }\n\n  private onResize() {\n    if (!this.#isDetectionEnabled) {\n      return;\n    }\n    if (!this.#supportedBreakpoints) {\n      return;\n    }\n    const matchBreakpoints: [Breakpoint, boolean][] = [];\n\n    const breakpoints = this.#supportedBreakpoints;\n\n    breakpoints.forEach((breakpoint) => {\n      const match = matchBreakpoint(breakpoint);\n      matchBreakpoints.push([breakpoint, match]);\n    });\n\n    if (matchBreakpoints.every(([_, match]) => match === false)) {\n      let breakPointIndex = 0;\n      if (!this.#supportedBreakpoints.includes('lg')) {\n        breakPointIndex = matchBreakpoints.length - 1;\n      }\n\n      const [breakpoint, _] = matchBreakpoints[breakPointIndex];\n      this.#breakpointChangeListener.emit(breakpoint);\n      this.#breakpoint = breakpoint;\n      return;\n    }\n\n    for (const [breakpoint, match] of matchBreakpoints.reverse()) {\n      if (match) {\n        this.#breakpointChangeListener.emit(breakpoint);\n        this.#breakpoint = breakpoint;\n        break;\n      }\n    }\n  }\n\n  public disableBreakpointDetection() {\n    this.#isDetectionEnabled = false;\n  }\n\n  public enableBreakpointDetection() {\n    this.#isDetectionEnabled = true;\n  }\n\n  public setBreakpoint(breakpoint: Breakpoint) {\n    this.#breakpoint = breakpoint;\n    this.#breakpointChangeListener.emit(breakpoint);\n  }\n\n  public setBreakpoints(breakpoints: Breakpoint[]) {\n    this.#supportedBreakpoints = breakpoints;\n    this.onResize();\n  }\n}\n\nexport const applicationLayoutService = new ApplicationLayoutService();\n"],"mappings":"iFAUgBA,EACdC,EACAC,GAEA,IAAIC,EAEJ,OAAO,SAASC,KAAaC,GAC3BC,aAAaH,GAEbA,EAAYI,YAAW,KACrBN,KAAQI,EAAK,GACZH,E,CAEP,C,swBCXA,MAAMM,EASJ,WAAAC,GAPAC,EAAAC,IAAAC,KAAsC,CAAC,KAAM,KAAM,OACnDC,EAAAF,IAAAC,KAA4B,IAAIE,GAChCC,EAAAJ,IAAAC,KAA0B,MAE1BI,EAAAL,IAAAC,KAAsB,MACtBA,KAAAK,kBAAoBjB,EAASY,KAAKM,SAASC,KAAKP,MAAO,IAGrD,UAAWQ,SAAW,YAAa,CACjCA,OAAOC,iBAAiB,SAAUT,KAAKK,kBAAkBE,KAAKP,OAC9DA,KAAKK,mB,EAIT,cAAIK,GACF,OAAOC,EAAAX,KAAIG,EAAA,I,CAGb,YAAIS,GACF,OAAOD,EAAAX,KAAIC,EAAA,I,CAGb,sBAAIY,GACF,OAAOF,EAAAX,KAAII,EAAA,I,CAGL,QAAAE,GACN,IAAKK,EAAAX,KAAII,EAAA,KAAsB,CAC7B,M,CAEF,IAAKO,EAAAX,KAAIF,EAAA,KAAwB,CAC/B,M,CAEF,MAAMgB,EAA4C,GAElD,MAAMC,EAAcJ,EAAAX,KAAIF,EAAA,KAExBiB,EAAYC,SAASN,IACnB,MAAMO,EAAQC,EAAgBR,GAC9BI,EAAiBK,KAAK,CAACT,EAAYO,GAAO,IAG5C,GAAIH,EAAiBM,OAAM,EAAEC,EAAGJ,KAAWA,IAAU,QAAQ,CAC3D,IAAIK,EAAkB,EACtB,IAAKX,EAAAX,KAAIF,EAAA,KAAuByB,SAAS,MAAO,CAC9CD,EAAkBR,EAAiBU,OAAS,C,CAG9C,MAAOd,EAAYW,GAAKP,EAAiBQ,GACzCX,EAAAX,KAAIC,EAAA,KAA2BwB,KAAKf,GACpCgB,EAAA1B,KAAIG,EAAeO,EAAU,KAC7B,M,CAGF,IAAK,MAAOA,EAAYO,KAAUH,EAAiBa,UAAW,CAC5D,GAAIV,EAAO,CACTN,EAAAX,KAAIC,EAAA,KAA2BwB,KAAKf,GACpCgB,EAAA1B,KAAIG,EAAeO,EAAU,KAC7B,K,GAKC,0BAAAkB,GACLF,EAAA1B,KAAII,EAAuB,MAAK,I,CAG3B,yBAAAyB,GACLH,EAAA1B,KAAII,EAAuB,KAAI,I,CAG1B,aAAA0B,CAAcpB,GACnBgB,EAAA1B,KAAIG,EAAeO,EAAU,KAC7BC,EAAAX,KAAIC,EAAA,KAA2BwB,KAAKf,E,CAG/B,cAAAqB,CAAehB,GACpBW,EAAA1B,KAAIF,EAAyBiB,EAAW,KACxCf,KAAKM,U,gEAII0B,EAA2B,IAAIpC,S"}