{"version":3,"names":["templateBuilder","inputTemplate","templateString","forEach","row","reduce","pV","cV","cssGridCss","IxCssGridStyle0","smQuery","mdQuery","lgQuery","mediaQueryCollection","name","query","CssGrid","this","disposeMediaQueryListener","mediaQueries","componentWillRender","map","mediaQuery","window","matchMedia","callback","applyTemplate","push","addEventListener","Object","assign","disconnectedCallback","mq","index","removeEventListener","findNextTemplate","type","typeIndex","findIndex","nextTemplate","templates","active","find","matches","length","template","currentTemplate","render","style","_a","h","Host","key"],"sources":["src/components/css-grid/builder.ts","src/components/css-grid/css-grid.scss?tag=ix-css-grid&encapsulation=shadow","src/components/css-grid/css-grid.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport function templateBuilder(inputTemplate: string[][]) {\n  let templateString = '';\n\n  inputTemplate.forEach((row) => {\n    templateString += '\"';\n    templateString = row.reduce((pV, cV) => {\n      return `${pV} ${cV}`;\n    }, templateString);\n    templateString += '\"\\n';\n  });\n\n  return templateString;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n@import 'common-variables';\n\n:host {\n  display: grid;\n  position: relative;\n  row-gap: $large-space;\n  column-gap: $large-space;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Component, h, Host, Prop, State } from '@stencil/core';\nimport { templateBuilder } from './builder';\n\nconst smQuery = 'only screen and (max-width: 576px)';\nconst mdQuery = 'only screen and (max-width: 768px)';\nconst lgQuery = 'only screen and (max-width: 992px)';\n\nexport type CssGridTemplateType = 'sm' | 'md' | 'lg';\n\nconst mediaQueryCollection: Array<{\n  name: CssGridTemplateType;\n  query: string;\n}> = [\n  { name: 'sm', query: smQuery },\n  { name: 'md', query: mdQuery },\n  { name: 'lg', query: lgQuery },\n];\n\n/**\n * @internal\n */\n@Component({\n  tag: 'ix-css-grid',\n  styleUrl: 'css-grid.scss',\n  shadow: true,\n})\nexport class CssGrid {\n  /**\n   * Define css grid template\n   */\n  @Prop() templates: Partial<Record<CssGridTemplateType, string[][]>>;\n\n  @State() currentTemplate: string[][];\n\n  private disposeMediaQueryListener: ((event: MediaQueryListEvent) => void)[] =\n    [];\n  private mediaQueries: {\n    mediaQuery: MediaQueryList;\n    name: CssGridTemplateType;\n    query: string;\n  }[] = [];\n\n  componentWillRender() {\n    this.mediaQueries = mediaQueryCollection.map((query) => {\n      const mediaQuery = window.matchMedia(query.query);\n\n      const callback = () => {\n        this.applyTemplate();\n      };\n      this.disposeMediaQueryListener.push(callback);\n      mediaQuery.addEventListener('change', callback);\n\n      return {\n        ...query,\n        mediaQuery,\n      };\n    });\n\n    this.applyTemplate();\n  }\n\n  disconnectedCallback() {\n    this.mediaQueries.forEach((mq, index) => {\n      mq.mediaQuery.removeEventListener(\n        'change',\n        this.disposeMediaQueryListener[index]\n      );\n    });\n  }\n\n  private findNextTemplate(type: CssGridTemplateType) {\n    const typeIndex = this.mediaQueries.findIndex((mq) => mq.name === type);\n    const nextTemplate = this.templates[this.mediaQueries[typeIndex + 1].name];\n    if (!nextTemplate) {\n      return this.findNextTemplate(this.mediaQueries[typeIndex + 1].name);\n    }\n    return nextTemplate;\n  }\n\n  private applyTemplate() {\n    let active = this.mediaQueries.find((mq) => mq.mediaQuery.matches);\n\n    if (!active) {\n      active = this.mediaQueries[this.mediaQueries.length - 1];\n    }\n\n    const template = this.templates[active.name];\n\n    if (template) {\n      this.currentTemplate = template;\n    } else {\n      this.currentTemplate = this.findNextTemplate(active.name);\n    }\n  }\n\n  render() {\n    const style = {};\n    if (this.currentTemplate?.length !== 0) {\n      style['grid-template-areas'] = templateBuilder(this.currentTemplate);\n    }\n    return (\n      <Host style={style}>\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"mappings":"2DAQgBA,EAAgBC,GAC9B,IAAIC,EAAiB,GAErBD,EAAcE,SAASC,IACrBF,GAAkB,IAClBA,EAAiBE,EAAIC,QAAO,CAACC,EAAIC,IACxB,GAAGD,KAAMC,KACfL,GACHA,GAAkB,KAAK,IAGzB,OAAOA,CACT,CCpBA,MAAMM,EAAa,gGACnB,MAAAC,EAAeD,ECWf,MAAME,EAAU,qCAChB,MAAMC,EAAU,qCAChB,MAAMC,EAAU,qCAIhB,MAAMC,EAGD,CACH,CAAEC,KAAM,KAAMC,MAAOL,GACrB,CAAEI,KAAM,KAAMC,MAAOJ,GACrB,CAAEG,KAAM,KAAMC,MAAOH,I,MAWVI,EAAO,M,yBAQVC,KAAAC,0BACN,GACMD,KAAAE,aAIF,G,wDAEN,mBAAAC,GACEH,KAAKE,aAAeN,EAAqBQ,KAAKN,IAC5C,MAAMO,EAAaC,OAAOC,WAAWT,EAAMA,OAE3C,MAAMU,EAAW,KACfR,KAAKS,eAAe,EAEtBT,KAAKC,0BAA0BS,KAAKF,GACpCH,EAAWM,iBAAiB,SAAUH,GAEtC,OAAAI,OAAAC,OAAAD,OAAAC,OAAA,GACKf,GAAK,CACRO,cAAU,IAIdL,KAAKS,e,CAGP,oBAAAK,GACEd,KAAKE,aAAahB,SAAQ,CAAC6B,EAAIC,KAC7BD,EAAGV,WAAWY,oBACZ,SACAjB,KAAKC,0BAA0Be,GAChC,G,CAIG,gBAAAE,CAAiBC,GACvB,MAAMC,EAAYpB,KAAKE,aAAamB,WAAWN,GAAOA,EAAGlB,OAASsB,IAClE,MAAMG,EAAetB,KAAKuB,UAAUvB,KAAKE,aAAakB,EAAY,GAAGvB,MACrE,IAAKyB,EAAc,CACjB,OAAOtB,KAAKkB,iBAAiBlB,KAAKE,aAAakB,EAAY,GAAGvB,K,CAEhE,OAAOyB,C,CAGD,aAAAb,GACN,IAAIe,EAASxB,KAAKE,aAAauB,MAAMV,GAAOA,EAAGV,WAAWqB,UAE1D,IAAKF,EAAQ,CACXA,EAASxB,KAAKE,aAAaF,KAAKE,aAAayB,OAAS,E,CAGxD,MAAMC,EAAW5B,KAAKuB,UAAUC,EAAO3B,MAEvC,GAAI+B,EAAU,CACZ5B,KAAK6B,gBAAkBD,C,KAClB,CACL5B,KAAK6B,gBAAkB7B,KAAKkB,iBAAiBM,EAAO3B,K,EAIxD,MAAAiC,G,MACE,MAAMC,EAAQ,GACd,KAAIC,EAAAhC,KAAK6B,mBAAe,MAAAG,SAAA,SAAAA,EAAEL,UAAW,EAAG,CACtCI,EAAM,uBAAyBhD,EAAgBiB,KAAK6B,gB,CAEtD,OACEI,EAACC,EAAI,CAAAC,IAAA,2CAACJ,MAAOA,GACXE,EAAA,QAAAE,IAAA,6C"}