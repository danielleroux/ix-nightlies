{"version":3,"names":["applyPolyfills","promises","window","win","customElements","Element","prototype","closest","matches","remove","getRootNode","push","import","checkIfURLIsSupported","u","URL","pathname","href","searchParams","e","Object","assign","entries","Array","find","includes","String","startsWith","endsWith","NodeList","forEach","fetch","WeakMap","then","n","c","Promise","all","NAMESPACE","scopeId","hostTagName","isSvgMode","queuePending","createTime","fnName","tagName","uniqueTime","key","measureText","HYDRATED_CSS","EMPTY_OBJ","SVG_NS","HTML_NS","isDef","v","isComplexType","o","queryNonceMetaTagContent","doc","_a","_b","_c","head","querySelector","getAttribute","undefined","h","nodeName","vnodeData","children","child","simple","lastSimple","vNodeChildren","walk","i","length","isArray","$text$","newVNode","classData","className","class","keys","filter","k","join","vnode","$attrs$","$children$","tag","text","$flags$","$tag$","$elm$","Host","isHost","node","parsePropertyValue","propValue","propType","emitEvent","elm","name","opts","ev","plt","ce","dispatchEvent","rootAppliedStyles","registerStyle","cssText","allowCS","style","styles","get","supportsConstructableStylesheets","CSSStyleSheet","replaceSync","set","addStyle","styleContainerNode","cmpMeta","mode","hostElm","getScopeId","nodeType","appliedStyles","styleElm","Set","has","createElement","innerHTML","nonce","$nonce$","setAttribute","insertBefore","add","adoptedStyleSheets","attachStyles","hostRef","$cmpMeta$","$hostElement$","flags","endAttachStyles","$tagName$","shadowRoot","classList","cmp","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","toLowerCase","oldClasses","parseClassList","newClasses","prop","removeProperty","setProperty","isComplex","removeAttribute","parseClassListRegex","value","split","updateElement","oldVnode","newVnode","host","oldVnodeAttrs","newVnodeAttrs","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","createElementNS","appendChild","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","removeVnodes","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","isSameVnode","patch","nextSibling","parentNode","leftVNode","rightVNode","oldVNode","oldChildren","newChildren","renderVdom","renderFnResults","$vnode$","rootVnode","attachToAncestor","ancestorComponent","$onRenderResolve$","r","scheduleUpdate","isInitialLoad","$ancestorComponent$","dispatch","dispatchHooks","writeTask","endSchedule","instance","$lazyInstance$","promise","updateComponent","async","endUpdate","rc","endRender","callRender","map","cb","childrenPromises","postUpdate","postUpdateComponent","render","consoleError","endPostUpdate","addHydratedFlag","$onReadyResolve$","appDidLoad","nextTick","who","documentElement","detail","namespace","safeCall","method","arg","thenFn","getValue","ref","propName","getHostRef","$instanceValues$","setValue","newVal","oldVal","$members$","areBothNaN","Number","isNaN","didValueChange","$watchers$","watchMethods","watchMethodName","proxyComponent","Cstr","watchers","members","memberFlags","defineProperty","this","configurable","enumerable","attrNameToPropName","Map","attributeChangedCallback","attrName","_oldValue","jmp","hasOwnProperty","observedAttributes","_","m","initializeComponent","hmrVersionId","loadModule","endLoad","isProxied","endNewInstance","fireConnectedCallback","endRegisterStyles","schedule","connectedCallback","endConnected","disconnectedCallback","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","metaCharset","visibilityStyle","deferredConnectedCallbacks","appLoadFallback","isBootstrapping","$resourcesUrl$","resourcesUrl","baseURI","lazyBundle","compactMeta","$listeners$","HostElement","HTMLElement","constructor","self","super","registerHost","attachShadow","clearTimeout","componentOnReady","$onReadyPromise$","$lazyBundleId$","define","firstChild","setTimeout","setNonce","hostRefs","registerInstance","lazyInstance","el","console","error","cmpModules","exportName","replace","bundleId","module","BUILD","hotModuleReplacement","processMod","importedModule","document","raf","requestAnimationFrame","ael","eventName","listener","addEventListener","rel","removeEventListener","CustomEvent","promiseResolve","resolve","queueDomReads","queueDomWrites","queueTask","queue","write","flush","consume","performance","now","patchEsm","defineCustomElements","size","color","svgContent"],"sources":["../../node_modules/.pnpm/@siemens+ix-icons@2.0.1/node_modules/@siemens/ix-icons/dist/esm/polyfills/index.js","../../node_modules/.pnpm/@siemens+ix-icons@2.0.1/node_modules/@siemens/ix-icons/dist/esm/index-68769e11.js","../../node_modules/.pnpm/@siemens+ix-icons@2.0.1/node_modules/@siemens/ix-icons/dist/esm/loader.js"],"sourcesContent":["export function applyPolyfills() {\n  var promises = [];\n  if (typeof window !== 'undefined') {\n    var win = window;\n\n    if (!win.customElements ||\n      (win.Element && (!win.Element.prototype.closest || !win.Element.prototype.matches || !win.Element.prototype.remove || !win.Element.prototype.getRootNode))) {\n      promises.push(import(/* webpackChunkName: \"polyfills-dom\" */ './dom.js'));\n    }\n\n    var checkIfURLIsSupported = function() {\n      try {\n        var u = new URL('b', 'http://a');\n        u.pathname = 'c%20d';\n        return (u.href === 'http://a/c%20d') && u.searchParams;\n      } catch (e) {\n        return false;\n      }\n    };\n\n    if (\n      'function' !== typeof Object.assign || !Object.entries ||\n      !Array.prototype.find || !Array.prototype.includes ||\n      !String.prototype.startsWith || !String.prototype.endsWith ||\n      (win.NodeList && !win.NodeList.prototype.forEach) ||\n      !win.fetch ||\n      !checkIfURLIsSupported() ||\n      typeof WeakMap == 'undefined'\n    ) {\n      promises.push(import(/* webpackChunkName: \"polyfills-core-js\" */ './core-js.js'));\n    }\n  }\n  return Promise.all(promises);\n}\n","const NAMESPACE = 'ix-icons';\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\n/**\n * Check whether a value is a 'complex type', defined here as an object or a\n * function.\n *\n * @param o the value to check\n * @returns whether it's a complex type or not\n */\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Helper method for querying a `meta` tag that contains a nonce value\n * out of a DOM's head.\n *\n * @param doc The DOM containing the `head` to query against\n * @returns The content of the meta tag representing the nonce value, or `undefined` if no tag\n * exists or the tag has no content.\n */\nfunction queryNonceMetaTagContent(doc) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = doc.head) === null || _a === void 0 ? void 0 : _a.querySelector('meta[name=\"csp-nonce\"]')) === null || _b === void 0 ? void 0 : _b.getAttribute('content')) !== null && _c !== void 0 ? _c : undefined;\n}\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    return vnode;\n};\n/**\n * A utility function for creating a virtual DOM node from a tag and some\n * possible text content.\n *\n * @param tag the tag for this element\n * @param text possible text content for the node\n * @returns a newly-minted virtual DOM node\n */\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\n/**\n * Check whether a given node is a Host node or not\n *\n * @param node the virtual DOM node to check\n * @returns whether it's a Host node or not\n */\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (propType & 1 /* MEMBER_FLAGS.String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst rootAppliedStyles = /*@__PURE__*/ new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructableStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        if (typeof style === 'string') {\n            style = cssText;\n        }\n        else {\n            style.replaceSync(cssText);\n        }\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    var _a;\n    let scopeId = getScopeId(cmpMeta);\n    const style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    // TODO(STENCIL-659): Remove code implementing the CSS variable shim\n                    {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    // Apply CSP nonce to the style tag if it exists\n                    const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n                    if (nonce != null) {\n                        styleElm.setAttribute('nonce', nonce);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n    // TODO(STENCIL-662): Remove code related to deprecated shadowDomShim field\n    if (flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (cmp.$tagName$);\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        memberName.toLowerCase();\n        if (memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if (memberName === 'style') {\n            // update style attribute, css properties and values\n            {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if (prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if (prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        const n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    {\n        if (!isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = (doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, newVNode.$tag$)\n            );\n        if (isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    return elm;\n};\n/**\n * Create DOM nodes corresponding to a list of {@link d.Vnode} objects and\n * add them to the DOM in the appropriate place.\n *\n * @param parentElm the DOM node which should be used as a parent for the new\n * DOM nodes\n * @param before a child of the `parentElm` which the new children should be\n * inserted before (optional)\n * @param parentVNode the parent virtual DOM node\n * @param vnodes the new child virtual DOM nodes to produce DOM nodes for\n * @param startIdx the index in the child virtual DOM nodes at which to start\n * creating DOM nodes (inclusive)\n * @param endIdx the index in the child virtual DOM nodes at which to stop\n * creating DOM nodes (inclusive)\n */\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = (parentElm);\n    let childNode;\n    if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, before);\n            }\n        }\n    }\n};\n/**\n * Remove the DOM elements corresponding to a list of {@link d.VNode} objects.\n * This can be used to, for instance, clean up after a list of children which\n * should no longer be shown.\n *\n * This function also handles some of Stencil's slot relocation logic.\n *\n * @param vnodes a list of virtual DOM nodes to remove\n * @param startIdx the index at which to start removing nodes (inclusive)\n * @param endIdx the index at which to stop removing nodes (inclusive)\n * @param vnode a VNode\n * @param elm an element\n */\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // VNode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            // if the start nodes are the same then we should patch the new VNode\n            // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n            // indices to reflect that. We don't need to move any DOM Nodes around\n            // since things are matched up in order.\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            // likewise, if the end nodes are the same we patch new onto old and\n            // decrement our end indices, and also likewise in this case we don't\n            // need to move any DOM Nodes.\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            patch(oldStartVnode, newEndVnode);\n            // We need to move the element for `oldStartVnode` into a position which\n            // will be appropriate for `newEndVnode`. For this we can use\n            // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n            // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n            // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n            //\n            // <old-start-node />\n            // <some-intervening-node />\n            // <old-end-node />\n            // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n            // <next-sibling />\n            //\n            // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n            // the node for `oldStartVnode` at the end of the children of\n            // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n            // aren't any siblings, and passing `null` to `Node.insertBefore` will\n            // append it to the children of the parent element.\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            patch(oldEndVnode, newStartVnode);\n            // We've already checked above if `oldStartVnode` and `newStartVnode` are\n            // the same node, so since we're here we know that they are not. Thus we\n            // can move the element for `oldEndVnode` _before_ the element for\n            // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n            // future.\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            {\n                // We either didn't find an element in the old children that matches\n                // the key of the first new child OR the build is not using `key`\n                // attributes at all. In either case we need to create a new element\n                // for the new node.\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                // if we created a new node then handle inserting it to the DOM\n                {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        // we have some more new nodes to add which don't match up with old nodes\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        // there are nodes in the `oldCh` array which no longer correspond to nodes\n        // in the new array, so lets remove them (which entails cleaning up the\n        // relevant DOM nodes)\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false negative and then have to do needless re-rendering\n * (i.e. we'd say two VNodes aren't equal when in fact they should be).\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\nconst isSameVnode = (leftVNode, rightVNode) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (leftVNode.$tag$ === rightVNode.$tag$) {\n        return true;\n    }\n    return false;\n};\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    {\n        {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        {\n            {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            // so we need to call `updateChildren` to reconcile them\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n};\n/**\n * The main entry point for Stencil's virtual DOM-based rendering engine\n *\n * Given a {@link d.HostRef} container and some virtual DOM nodes, this\n * function will handle creating a virtual DOM tree with a single root, patching\n * the current virtual DOM tree onto an old one (if any), dealing with slot\n * relocation, and reflecting attributes.\n *\n * @param hostRef data needed to root and render the virtual DOM tree, such as\n * the DOM node into which it should be rendered.\n * @param renderFnResults the virtual DOM nodes to be rendered\n */\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm.shadowRoot || hostElm );\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n    if (hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return writeTask(dispatch) ;\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = hostRef.$lazyInstance$ ;\n    let promise;\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance);\n    }\n    if (rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    try {\n        instance = instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = (elm) => elm.classList.add('hydrated')\n    ;\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = hostRef.$hostElement$ ;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (instance) {\n            // get an array of method names of watch functions to call\n            if (cmpMeta.$watchers$ && flags & 128 /* HOST_FLAGS.isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if ((flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (cmpMeta.$members$) {\n        if (Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((memberFlags & 31 /* MEMBER_FLAGS.Prop */ ||\n                    ((flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n        if ((flags & 1 /* PROXY_FLAGS.isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* MEMBER_FLAGS.HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\n        {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if (!Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            {\n                hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */;\n            }\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        if (Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n    {\n        safeCall(instance, 'connectedCallback');\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // fire off connectedCallback() on component instance\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        endConnected();\n    }\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        getHostRef(elm);\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    var _a;\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            {\n                cmpMeta.$watchers$ = {};\n            }\n            const tagName = cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        {\n                            {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n            }\n        });\n    });\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        // Apply CSP nonce to the style tag if it exists\n        const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n        if (nonce != null) {\n            visibilityStyle.setAttribute('nonce', nonce);\n        }\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\n/**\n * Assigns the given value to the nonce property on the runtime platform object.\n * During runtime, this value is used to set the nonce attribute on all dynamically created script and style tags.\n * @param nonce The value to be assigned to the platform nonce property.\n * @returns void\n */\nconst setNonce = (nonce) => (plt.$nonce$ = nonce);\nconst hostRefs = /*@__PURE__*/ new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module = cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    \n    if (!hmrVersionId || !BUILD.hotModuleReplacement) {\n      const processMod = importedModule => {\n        cmpModules.set(bundleId, importedModule);\n        return importedModule[exportName];\n      }\n      switch(bundleId) {\n        \n        case 'ix-icon':\n          return import(\n            /* webpackMode: \"lazy\" */\n            './ix-icon.entry.js').then(processMod, consoleError);\n      }\n    }\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`).then((importedModule) => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = /*@__PURE__*/ new Map();\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructableStylesheets = /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replaceSync === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { Host as H, bootstrapLazy as b, h, promiseResolve as p, registerInstance as r, setNonce as s };\n\n//# sourceMappingURL=index-68769e11.js.map","import { p as promiseResolve, b as bootstrapLazy } from './index-68769e11.js';\nexport { s as setNonce } from './index-68769e11.js';\n\n/*\n Stencil Client Patch Esm v3.2.1 | MIT Licensed | https://stenciljs.com\n */\nconst patchEsm = () => {\n    return promiseResolve();\n};\n\nconst defineCustomElements = (win, options) => {\n  if (typeof window === 'undefined') return Promise.resolve();\n  return patchEsm().then(() => {\n  return bootstrapLazy([[\"ix-icon\",[[1,\"ix-icon\",{\"size\":[1],\"color\":[1],\"name\":[1],\"svgContent\":[32]}]]]], options);\n  });\n};\n\nexport { defineCustomElements };\n\n//# sourceMappingURL=loader.js.map"],"mappings":"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"}