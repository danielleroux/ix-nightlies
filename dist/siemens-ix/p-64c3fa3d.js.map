{"version":3,"names":["makeRef","currentChangedCallback","resolve","currentPromise","Promise","res","current","setRefFunction","ref","waitForCurrent","async"],"sources":["src/components/utils/make-ref.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport type MakeRef<T> = {\n  (ref: T): void;\n  current: T;\n  waitForCurrent(): Promise<T>;\n};\n\nexport function makeRef<T>(\n  currentChangedCallback?: (element: T) => void\n): MakeRef<T> {\n  let resolve = null;\n  let currentPromise = new Promise((res) => (resolve = res));\n  let current: T = null;\n\n  const setRefFunction = (ref: T) => {\n    current = ref;\n    currentChangedCallback?.(ref);\n    resolve();\n  };\n\n  setRefFunction.current = current;\n  setRefFunction.waitForCurrent = async () => {\n    await currentPromise;\n    return current;\n  };\n\n  return setRefFunction;\n}\n"],"mappings":"SAegBA,EACdC,GAEA,IAAIC,EAAU,KACd,IAAIC,EAAiB,IAAIC,SAASC,GAASH,EAAUG,IACrD,IAAIC,EAAa,KAEjB,MAAMC,EAAkBC,IACtBF,EAAUE,EACVP,IAAsB,MAAtBA,SAAsB,SAAtBA,EAAyBO,GACzBN,GAAS,EAGXK,EAAeD,QAAUA,EACzBC,EAAeE,eAAiBC,gBACxBP,EACN,OAAOG,CAAO,EAGhB,OAAOC,CACT,Q"}