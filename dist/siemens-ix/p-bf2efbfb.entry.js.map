{"version":3,"names":["dateDropdownCss","IxDateDropdownStyle0","DateDropdown","this","datePickerTouched","DateTime","now","toISO","onDateRangeIdChange","onRangeListSelect","dateRangeId","onDateSelect","from","currentRangeValue","to","id","onDateRangeOptionsChange","initialize","componentWillLoad","setDateRangeSelection","getDateRange","isCustomRange","customRangeAllowed","selectedDateRangeId","isValidConfiguration","console","warn","rangeValue","preserveDropdown","dateRangeChange","emit","closeDropdown","option","dateRangeOptions","find","range","hostElement","shadowRoot","querySelector","show","getButtonLabel","_a","i18nNoRange","_b","length","error","label","render","h","Host","key","variant","icon","ref","triggerRef","class","trigger","placement","onShowChanged","detail","map","dateRangeOption","onClick","checked","hidden","i18nCustomItem","Fragment","standaloneAppearance","onDateChange","e","stopPropagation","Object","assign","onDateRangeChange","format","minDate","maxDate","today","i18nDone"],"sources":["src/components/date-dropdown/date-dropdown.scss?tag=ix-date-dropdown&encapsulation=shadow","src/components/date-dropdown/date-dropdown.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n@import 'common-variables';\n@import 'mixins/shadow-dom/component';\n\n:host {\n  @include ix-component;\n  display: inline-block;\n  position: relative;\n\n  @media (max-width: 48em) {\n    .min-width {\n      width: min-content;\n    }\n  }\n\n  @media (min-width: 48em) {\n    .border-right {\n      border-right: var(--theme-x-weak-bdr-2);\n    }\n  }\n\n  .max-height {\n    max-height: max-content;\n  }\n\n  .no-margin {\n    margin: 0;\n    padding: 0;\n  }\n\n  .pull-right {\n    float: right;\n    padding: $tiny-space $default-space;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  Fragment,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\nimport { DateTime } from 'luxon';\n\nexport type DateDropdownOption = {\n  id: string;\n  label: string;\n  from: string;\n  to: string;\n};\n\nexport type DateRangeChangeEvent = {\n  id: string;\n  from: string;\n  to: string;\n};\n\n/**\n * @since 2.1.0\n */\n@Component({\n  tag: 'ix-date-dropdown',\n  styleUrl: 'date-dropdown.scss',\n  shadow: true,\n})\nexport class DateDropdown {\n  @Element() hostElement: HTMLIxDateDropdownElement;\n\n  /**\n   * Date format string.\n   * See @link https://moment.github.io/luxon/#/formatting?id=table-of-tokens for all available tokens.\n   */\n  @Prop() format = 'yyyy/LL/dd';\n\n  /**\n   * If true a range of dates can be selected.\n   */\n  @Prop() range = true;\n\n  /**\n   * Picker date. If the picker is in range mode this property is the start date.\n   * If set to `null` no default start date will be pre-selected.\n   *\n   * Format is based on `format`\n   */\n  @Prop() from: string;\n\n  /**\n   * Picker date. If the picker is in range mode this property is the end date.\n   * If the picker is not in range mode leave this value `null`\n   *\n   * Format is based on `format`\n   */\n  @Prop() to: string;\n\n  /**\n   * The earliest date that can be selected by the date picker.\n   * If not set there will be no restriction.\n   */\n  @Prop() minDate: string;\n\n  /**\n   * The latest date that can be selected by the date picker.\n   * If not set there will be no restriction.\n   */\n  @Prop() maxDate: string;\n\n  /**\n   * Used to set the initial select date range as well as the button name,\n   * if not set or no according date range label is found, nothing will be selected\n   */\n  @Prop() dateRangeId = 'custom';\n  @Watch('dateRangeId')\n  @Watch('to')\n  @Watch('from')\n  onDateRangeIdChange() {\n    this.onRangeListSelect(this.dateRangeId);\n    this.onDateSelect({\n      from: this.currentRangeValue.from,\n      to: this.currentRangeValue.to,\n      id: this.currentRangeValue.id,\n    });\n  }\n\n  /**\n   * Controls whether the user is allowed to pick custom date ranges in the component.\n   * When set to 'true', the user can select a custom date range using the date picker.\n   * When set to 'false', only predefined time date ranges are available for selection.\n   */\n  @Prop() customRangeAllowed = true;\n\n  /**\n   * An array of predefined date range options for the date picker.\n   * Each option is an object with a label describing the range and a function\n   * that returns the start and end dates of the range as a DateRangeOption object.\n   *\n   * Example format:\n   *   {\n   *     id: 'some unique id',\n   *     label: 'Name of the range',\n   *     from: undefined, to: '2023/03/29'\n   *   },\n   *   // ... other predefined date range options ...\n   */\n  @Prop() dateRangeOptions: DateDropdownOption[] = [];\n  @Watch('dateRangeOptions')\n  onDateRangeOptionsChange() {\n    this.initialize();\n    this.onDateRangeIdChange();\n  }\n\n  /**\n   * Text for custom dropdown item. Will be used for translation.\n   */\n  @Prop({ attribute: 'i18n-custom-item' }) i18nCustomItem = 'Custom...';\n\n  /**\n   * Text for the done button. Will be used for translation.\n   */\n  @Prop({ attribute: 'i18n-done' }) i18nDone = 'Done';\n\n  /**\n   * Text for the done button. Will be used for translation.\n   */\n  @Prop({ attribute: 'i18n-no-range' }) i18nNoRange = 'No range set';\n\n  /** @internal */\n  @Prop() today = DateTime.now().toISO();\n\n  /**\n   * EventEmitter for date range change events.\n   *\n   * This event is emitted when the date range changes within the component.\n   * The event payload contains information about the selected date range.\n   */\n  @Event() private dateRangeChange: EventEmitter<DateRangeChangeEvent>;\n\n  @State() private selectedDateRangeId: 'custom' | (string & {});\n  @State() private currentRangeValue: {\n    from: string;\n    to: string;\n    id: string;\n  };\n  @State() private triggerRef: HTMLElement;\n\n  private datePickerTouched = false;\n\n  componentWillLoad() {\n    this.initialize();\n    this.setDateRangeSelection(this.dateRangeId);\n  }\n\n  /**\n   * Retrieves the currently selected date range from the component.\n   * This method returns the selected date range as a `DateChangeEvent` object.\n   */\n  @Method()\n  public async getDateRange(): Promise<DateRangeChangeEvent> {\n    return this.currentRangeValue;\n  }\n\n  private initialize() {\n    const isCustomRange =\n      this.dateRangeId === 'custom' ||\n      (!this.dateRangeId && !!this.from && !!this.to);\n\n    if (isCustomRange && this.customRangeAllowed) {\n      this.selectedDateRangeId = 'custom';\n      this.currentRangeValue = {\n        id: this.selectedDateRangeId,\n        from: this.from,\n        to: this.to,\n      };\n\n      return;\n    }\n    const isValidConfiguration = !isCustomRange && !this.from;\n    if (!isValidConfiguration) {\n      console.warn(\n        '\"from\" and \"range-date-id\" is provided this is an invalid combination. Using \"custom\".'\n      );\n\n      this.selectedDateRangeId = 'custom';\n      this.currentRangeValue = {\n        id: this.selectedDateRangeId,\n        from: this.from,\n        to: this.to,\n      };\n\n      return;\n    }\n  }\n\n  private onDateSelect(\n    rangeValue: { from: string; to: string; id: string },\n    preserveDropdown = true\n  ) {\n    this.dateRangeChange.emit(rangeValue);\n\n    if (preserveDropdown) {\n      this.closeDropdown();\n    }\n\n    this.datePickerTouched = false;\n  }\n\n  private onRangeListSelect(id: string) {\n    if (this.setDateRangeSelection(id)) {\n      this.onDateSelect(this.currentRangeValue);\n    }\n  }\n\n  private setDateRangeSelection(id: string) {\n    this.selectedDateRangeId = id;\n    const option = this.dateRangeOptions.find((range) => range.id === id);\n\n    if (option) {\n      this.currentRangeValue = option;\n    }\n\n    return option;\n  }\n\n  private closeDropdown() {\n    this.hostElement.shadowRoot.querySelector('ix-dropdown').show = false;\n  }\n\n  private getButtonLabel() {\n    if (this.selectedDateRangeId === 'custom' && this.currentRangeValue?.from) {\n      let range = this.currentRangeValue.from;\n\n      if (this.currentRangeValue.to) {\n        range += ` - ${this.currentRangeValue.to}`;\n      }\n\n      return range;\n    }\n\n    if (!this.selectedDateRangeId) {\n      return this.i18nNoRange;\n    }\n\n    if (!this.dateRangeOptions || this.dateRangeOptions?.length === 0) {\n      return this.i18nNoRange;\n    }\n\n    const option = this.dateRangeOptions.find(\n      (option) => option.id === this.selectedDateRangeId\n    );\n\n    if (!option) {\n      console.error(\n        `Cannot find range option with id ${this.selectedDateRangeId}`\n      );\n      return this.i18nNoRange;\n    }\n\n    return option.label;\n  }\n\n  render() {\n    return (\n      <Host>\n        <ix-button\n          data-date-dropdown-trigger\n          variant=\"primary\"\n          icon=\"history\"\n          ref={(ref) => (this.triggerRef = ref)}\n          class=\"button-width\"\n        >\n          {this.getButtonLabel()}\n        </ix-button>\n        <ix-dropdown\n          data-date-dropdown\n          class=\"min-width max-height\"\n          trigger={this.triggerRef}\n          close-behavior=\"outside\"\n          placement=\"bottom-start\"\n          onShowChanged={({ detail: show }) => {\n            if (\n              !show &&\n              this.selectedDateRangeId === 'custom' &&\n              this.datePickerTouched\n            ) {\n              this.onDateSelect(this.currentRangeValue);\n            }\n          }}\n        >\n          <ix-layout-grid no-margin=\"true\">\n            <ix-row>\n              <ix-col\n                class={{\n                  'no-margin': true,\n                  'border-right': this.selectedDateRangeId === 'custom',\n                }}\n              >\n                {this.dateRangeOptions.map((dateRangeOption) => (\n                  <ix-dropdown-item\n                    label={dateRangeOption.label}\n                    onClick={() => this.onRangeListSelect(dateRangeOption.id)}\n                    checked={this.selectedDateRangeId === dateRangeOption.id}\n                  ></ix-dropdown-item>\n                ))}\n                <div hidden={!this.customRangeAllowed}>\n                  <ix-dropdown-item\n                    label={this.i18nCustomItem}\n                    checked={this.selectedDateRangeId === 'custom'}\n                    onClick={() => this.onRangeListSelect('custom')}\n                  ></ix-dropdown-item>\n                </div>\n              </ix-col>\n              <ix-col class=\"no-margin\">\n                {this.selectedDateRangeId === 'custom' && (\n                  <Fragment>\n                    <ix-date-picker\n                      standaloneAppearance={false}\n                      onDateChange={(e) => {\n                        e.stopPropagation();\n                        this.currentRangeValue = {\n                          ...e.detail,\n                          id: 'custom',\n                        };\n                        this.datePickerTouched = true;\n                      }}\n                      onDateRangeChange={(e) => e.stopPropagation()}\n                      format={this.format}\n                      range={this.range}\n                      from={this.from || this.currentRangeValue?.from}\n                      to={this.to || this.currentRangeValue?.to}\n                      minDate={this.minDate}\n                      maxDate={this.maxDate}\n                      today={this.today}\n                    ></ix-date-picker>\n                    <div class=\"pull-right\">\n                      <ix-button\n                        onClick={() => {\n                          this.onDateSelect(this.currentRangeValue);\n                        }}\n                      >\n                        {this.i18nDone}\n                      </ix-button>\n                    </div>\n                  </Fragment>\n                )}\n              </ix-col>\n            </ix-row>\n          </ix-layout-grid>\n        </ix-dropdown>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}