{"version":3,"names":["convertToRemString","value","valueRem","convertToAbbreviationString","num","isNaN","undefined","unit","units","Math","pow","some","formattedNum","abs","round"],"sources":["src/components/utils/rwd.util.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport const convertToRemString = (value: number) => {\n  const valueRem = value / 16;\n  return `${valueRem}rem`;\n};\n\nexport const convertToAbbreviationString = (num: number) => {\n  if (isNaN(num) || num === null || num === undefined) {\n    return '';\n  }\n\n  let unit = '';\n\n  // Metric Units\n  const units = [\n    { unit: 'q', value: Math.pow(10, 15) },\n    { unit: 't', value: Math.pow(10, 12) },\n    { unit: 'B', value: Math.pow(10, 9) },\n    { unit: 'M', value: Math.pow(10, 6) },\n    { unit: 'K', value: Math.pow(10, 3) },\n  ];\n\n  units.some((pow) => {\n    let formattedNum = Math.abs(num);\n    if (formattedNum >= pow.value) {\n      formattedNum /= pow.value;\n      num = Math.round(formattedNum * 10) / 10;\n      unit = pow.unit;\n      return true;\n    }\n\n    return false;\n  });\n\n  return num + unit;\n};\n"],"mappings":"MASaA,EAAsBC,IACjC,MAAMC,EAAWD,EAAQ,GACzB,MAAO,GAAGC,MAAa,E,MAGZC,EAA+BC,IAC1C,GAAIC,MAAMD,IAAQA,IAAQ,MAAQA,IAAQE,UAAW,CACnD,MAAO,E,CAGT,IAAIC,EAAO,GAGX,MAAMC,EAAQ,CACZ,CAAED,KAAM,IAAKN,MAAOQ,KAAKC,IAAI,GAAI,KACjC,CAAEH,KAAM,IAAKN,MAAOQ,KAAKC,IAAI,GAAI,KACjC,CAAEH,KAAM,IAAKN,MAAOQ,KAAKC,IAAI,GAAI,IACjC,CAAEH,KAAM,IAAKN,MAAOQ,KAAKC,IAAI,GAAI,IACjC,CAAEH,KAAM,IAAKN,MAAOQ,KAAKC,IAAI,GAAI,KAGnCF,EAAMG,MAAMD,IACV,IAAIE,EAAeH,KAAKI,IAAIT,GAC5B,GAAIQ,GAAgBF,EAAIT,MAAO,CAC7BW,GAAgBF,EAAIT,MACpBG,EAAMK,KAAKK,MAAMF,EAAe,IAAM,GACtCL,EAAOG,EAAIH,KACX,OAAO,I,CAGT,OAAO,KAAK,IAGd,OAAOH,EAAMG,CAAI,S"}