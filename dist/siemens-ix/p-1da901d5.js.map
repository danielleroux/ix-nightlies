{"version":3,"names":["ThemeSwitcher","themeChanged","this","_themeChanged","hasVariantSuffix","className","endsWith","suffixDark","suffixLight","isThemeClass","startsWith","prefixTheme","setTheme","themeName","systemAppearance","Error","currentSystemAppearance","getCurrentSystemAppearance","replaceBodyThemeClass","setVariant","oldThemes","document","body","classList","forEach","push","remove","add","toggleMode","length","getOppositeMode","defaultTheme","replace","getCurrentTheme","_a","Array","from","find","window","getComputedStyle","getPropertyValue","variant","currentTheme","handleMutations","mutations","mutation","target","oldValue","includes","emit","registerMutationObserver","console","warn","mutationObserver","MutationObserver","observe","attributeFilter","attributeOldValue","constructor","TypedEvent","matchMedia","matches","themeSwitcher"],"sources":["src/components/utils/theme-switcher.ts"],"sourcesContent":["import { TypedEvent } from './typed-event';\n\nexport type ThemeVariant = 'light' | 'dark';\n\nclass ThemeSwitcher {\n  readonly prefixTheme = 'theme-';\n  readonly suffixLight = '-light';\n  readonly suffixDark = '-dark';\n  readonly defaultTheme = 'theme-classic-dark';\n\n  mutationObserver: MutationObserver;\n  _themeChanged = new TypedEvent<string>();\n\n  public get themeChanged() {\n    return this._themeChanged;\n  }\n\n  public hasVariantSuffix(className: string) {\n    return (\n      className.endsWith(this.suffixDark) ||\n      className.endsWith(this.suffixLight)\n    );\n  }\n\n  private isThemeClass(className: string) {\n    return (\n      className.startsWith(this.prefixTheme) && this.hasVariantSuffix(className)\n    );\n  }\n\n  public setTheme(themeName: string, systemAppearance = false) {\n    if (!this.isThemeClass(themeName) && systemAppearance === false) {\n      throw Error(\n        `Provided theme name ${themeName} does not match our naming conventions. (theme-<name>-(dark,light))`\n      );\n    }\n\n    if (systemAppearance) {\n      const currentSystemAppearance = getCurrentSystemAppearance();\n      this.replaceBodyThemeClass(themeName);\n      this.setVariant(currentSystemAppearance);\n      return;\n    }\n\n    this.replaceBodyThemeClass(themeName);\n  }\n\n  private replaceBodyThemeClass(themeName: string) {\n    const oldThemes: string[] = [];\n    document.body.classList.forEach((className) => {\n      if (this.isThemeClass(className)) {\n        oldThemes.push(className);\n      }\n    });\n\n    document.body.classList.remove(...oldThemes);\n    document.body.classList.add(themeName);\n  }\n\n  public toggleMode() {\n    const oldThemes: string[] = [];\n\n    document.body.classList.forEach((className) => {\n      if (this.isThemeClass(className)) {\n        oldThemes.push(className);\n      }\n    });\n\n    if (oldThemes.length === 0) {\n      document.body.classList.add(this.getOppositeMode(this.defaultTheme));\n      return;\n    }\n\n    oldThemes.forEach((themeName) => {\n      document.body.classList.replace(\n        themeName,\n        this.getOppositeMode(themeName)\n      );\n    });\n  }\n\n  public getCurrentTheme() {\n    return (\n      Array.from(document.body.classList).find((className) =>\n        this.isThemeClass(className)\n      ) ??\n      `theme-${window\n        .getComputedStyle(document.body)\n        .getPropertyValue('--ix-theme-name')}`\n    );\n  }\n\n  public setVariant(variant: ThemeVariant = getCurrentSystemAppearance()) {\n    const currentTheme = this.getCurrentTheme();\n    document.body.classList.remove(currentTheme);\n\n    if (currentTheme.endsWith(this.suffixDark)) {\n      document.body.classList.add(\n        currentTheme.replace(/-dark$/g, `-${variant}`)\n      );\n    }\n\n    if (currentTheme.endsWith(this.suffixLight)) {\n      document.body.classList.add(\n        currentTheme.replace(/-light$/g, `-${variant}`)\n      );\n    }\n  }\n\n  private getOppositeMode(themeName: string) {\n    if (themeName.endsWith(this.suffixDark)) {\n      return themeName.replace(/-dark$/g, this.suffixLight);\n    }\n\n    if (themeName.endsWith(this.suffixLight)) {\n      return themeName.replace(/-light$/g, this.suffixDark);\n    }\n  }\n\n  private handleMutations(mutations: MutationRecord[]) {\n    return mutations.forEach((mutation) => {\n      const { target } = mutation;\n      (target as HTMLElement).classList.forEach((className) => {\n        if (\n          this.isThemeClass(className) &&\n          !mutation.oldValue?.includes(className)\n        ) {\n          this._themeChanged.emit(className);\n        }\n      });\n    });\n  }\n\n  private registerMutationObserver() {\n    if (typeof (window as any) === 'undefined') {\n      return;\n    }\n\n    if (!('MutationObserver' in window)) {\n      console.warn(\n        'ThemeSwitcher not supported by your browser. Missing MutationObserver API'\n      );\n      return;\n    }\n\n    this.mutationObserver = new MutationObserver((mutations) => {\n      this.handleMutations(mutations);\n    });\n\n    this.mutationObserver.observe(document.body, {\n      attributeFilter: ['class'],\n      attributeOldValue: true,\n    });\n  }\n\n  public constructor() {\n    this.registerMutationObserver();\n  }\n}\n\nexport type IxTheme =\n  | 'classic'\n  | 'classic-dark'\n  | 'classic-light'\n  | (string & {});\n\nexport const getCurrentSystemAppearance = (): ThemeVariant => {\n  const matchMedia = window.matchMedia('(prefers-color-scheme: dark)');\n\n  if (matchMedia.matches) {\n    return 'dark';\n  }\n\n  return 'light';\n};\n\nexport const themeSwitcher = new ThemeSwitcher();\n"],"mappings":"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"}