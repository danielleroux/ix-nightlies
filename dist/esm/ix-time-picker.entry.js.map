{"file":"ix-time-picker.entry.js","mappings":"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","names":["DateTime"],"sources":["src/components/time-picker/time-picker.scss?tag=ix-time-picker&encapsulation=shadow","src/components/time-picker/time-picker.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n@import 'common-variables';\n@import 'mixins/shadow-dom/component';\n@import 'components/form/input';\n\n:host {\n  @include ix-component;\n  @import 'legacy/components/forms';\n\n  display: block;\n  position: relative;\n  width: 22rem;\n\n  @media (max-width: 576px) {\n    .clock {\n      padding: 1.5rem 0;\n    }\n\n    .header {\n      height: $medium-control-height !important;\n    }\n  }\n\n  @media (min-width: 576px) {\n    .clock {\n      padding: 4.25rem 0;\n    }\n\n    .header {\n      height: $large-control-height !important;\n    }\n  }\n\n  .header {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: $large-control-height;\n  }\n\n  .flex {\n    display: flex;\n  }\n\n  .clock {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  input,\n  .time-reference {\n    width: 2.625rem;\n    height: $large-space;\n    text-align: center;\n    margin-top: 0.25rem;\n    margin-bottom: 0.25rem;\n\n    /* Chrome, Safari, Edge, Opera */\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0 0.3125rem;\n    }\n\n    /* Firefox */\n    &[type='number'] {\n      -moz-appearance: textfield;\n    }\n  }\n\n  .form-control[type='number'] {\n    text-align: center;\n  }\n\n  .columns {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-around;\n  }\n\n  .column-seperator {\n    display: flex;\n    align-items: center;\n    margin: 0 $tiny-space;\n  }\n\n  .button {\n    display: flex;\n    justify-content: flex-end;\n  }\n\n  .default-space {\n    margin-left: $default-space;\n  }\n\n  .text-align {\n    text-align: center;\n  }\n\n  .hidden {\n    display: none;\n  }\n\n  .time-reference {\n    margin-top: 0.5rem;\n    margin-bottom: 0.5rem;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\nimport { DateTime } from 'luxon';\nimport { DateTimeCardCorners } from '../date-time-card/date-time-card';\n\nexport type TimePickerCorners = DateTimeCardCorners;\n\ninterface TimePickerDescriptor {\n  unit: 'hour' | 'minute' | 'second';\n  placeholder: string;\n  hidden: boolean;\n}\n\ninterface TimeOutputFormat {\n  hour: string;\n  minute: string;\n  second: string;\n}\n\n@Component({\n  tag: 'ix-time-picker',\n  styleUrl: 'time-picker.scss',\n  shadow: true,\n})\nexport class TimePicker {\n  /**\n   * Format of time string\n   * See {@link \"https://moment.github.io/luxon/#/formatting?id=table-of-tokens\"} for all available tokens.\n   *\n   * @since 1.1.0\n   */\n  @Prop() format: string = 'TT';\n\n  /**\n   * Corner style\n   */\n  @Prop() corners: TimePickerCorners = 'rounded';\n\n  /**\n   * Controls the visual presentation and styling of the component when it is displayed as a standalone element\n   */\n  @Prop() standaloneAppearance: boolean = true;\n\n  /**\n   * @deprecated Not supported since 2.0.0.\n   */\n  @Prop() individual: boolean = true;\n\n  /**\n   * Show hour input\n   */\n  @Prop() showHour = true;\n\n  /**\n   * Show minutes input\n   */\n  @Prop() showMinutes = true;\n\n  /**\n   * Show seconds input\n   */\n  @Prop() showSeconds = true;\n\n  /**\n   * Select time with format string\n   * Format has to match the `format` property.\n   *\n   * @since 1.1.0\n   */\n  @Prop() time: string = DateTime.now().toFormat(this.format);\n\n  @Watch('time')\n  watchTimePropHandler(newValue: string) {\n    this._time = DateTime.fromFormat(newValue, this.format);\n    if (!this._time.isValid) {\n      throw new Error('Format is not supported or not correct');\n    }\n  }\n\n  /**\n   * Show time reference input\n   *\n   * @since 1.1.0 time reference is default aligned with format tt\n   * @deprecated Since 2.0.0 time reference will be displayed depending on format.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable\n  @Prop({ mutable: true }) showTimeReference?: boolean = undefined;\n\n  /**\n   * Set time reference\n   */\n  @Prop() timeReference: 'AM' | 'PM' | undefined;\n\n  /**\n   * Text of date select button\n   *\n   * @since 1.1.0\n   */\n  @Prop() textSelectTime = 'Done';\n\n  /**\n   * Text for top label\n   *\n   * @since 2.1.0\n   */\n  @Prop() textTime: string = 'Time';\n\n  /**\n   * Time event\n   */\n  @Event() timeSelect: EventEmitter<string>;\n\n  /**\n   * Time event\n   * @deprecated Will be removed in 3.0.0. Use `time-select` event.\n   */\n  @Event() done: EventEmitter<string>;\n\n  /**\n   * Time change event\n   */\n  @Event() timeChange: EventEmitter<string>;\n\n  @State() private _time: DateTime;\n  @State() private _timeRef: 'AM' | 'PM' | undefined;\n  @State() private _formattedTime: TimeOutputFormat;\n\n  componentWillLoad() {\n    this._time = DateTime.fromFormat(this.time, this.format);\n\n    if (!this._time.isValid) {\n      console.error(\n        `Invalid time format. The configured format does not match the format of the passed time. ${this._time.invalidReason}: ${this._time.invalidExplanation}`\n      );\n      return;\n    }\n\n    this._timeRef = this.format.includes('a')\n      ? (DateTime.fromFormat(this.time, this.format).toFormat('a') as\n          | 'AM'\n          | 'PM')\n      : undefined;\n    this.formatTime();\n  }\n\n  @Watch('_time')\n  formatTime() {\n    const [hour, minute, second] = this._time\n      .toFormat(this.format)\n      .split(' ')[0]\n      .split(':');\n\n    this._formattedTime = {\n      hour: hour,\n      minute: minute,\n      second: second,\n    };\n  }\n\n  @Watch('_time')\n  onInternalTimeChange() {\n    this.timeChange.emit(this._time.toFormat(this.format));\n    if (this._timeRef) this._timeRef = this._time.toFormat('a') as 'AM' | 'PM';\n  }\n\n  timeUpdate(unit: 'hour' | 'minute' | 'second', value: number): number {\n    let maxValue = DateTime.now().endOf('day').get(unit);\n\n    if (this._timeRef === 'PM' && unit === 'hour') value += 12;\n    if (this._timeRef === 'AM' && unit === 'hour') maxValue = 12;\n\n    if (value > maxValue) {\n      value = maxValue;\n    } else if (value < 0) {\n      value = 0;\n    }\n\n    this._time = this._time.set({\n      [unit]: value,\n    });\n    return value;\n  }\n\n  changeTimeReference() {\n    this._timeRef = this._timeRef === 'AM' ? 'PM' : 'AM';\n\n    if (!this._time.toFormat('a').includes(this._timeRef)) {\n      this._time = this._time.plus({\n        hour: 12,\n      });\n    }\n  }\n\n  /**\n   * Get the current time based on the wanted format\n   */\n  @Method()\n  async getCurrentTime() {\n    return this._time.toFormat(this.format);\n  }\n\n  render() {\n    let timepickerInformation: TimePickerDescriptor[] = [\n      {\n        unit: 'hour',\n        placeholder: 'HH',\n        hidden: !this.showHour,\n      },\n      {\n        unit: 'minute',\n        placeholder: 'MM',\n        hidden: !this.showMinutes,\n      },\n      {\n        unit: 'second',\n        placeholder: 'SS',\n        hidden: !this.showSeconds,\n      },\n    ];\n\n    timepickerInformation = timepickerInformation.filter(\n      (item) => !item.hidden\n    );\n\n    return (\n      <Host>\n        <ix-date-time-card\n          standaloneAppearance={this.standaloneAppearance}\n          corners={this.corners}\n        >\n          <div class=\"header\" slot=\"header\">\n            <ix-typography variant=\"default-title\">\n              {this.textTime || 'Time'}\n            </ix-typography>\n          </div>\n          <div class=\"clock\">\n            {timepickerInformation.map((descriptor, index: number) => (\n              <div class=\"flex\">\n                <div class={{ columns: true, hidden: descriptor.hidden }}>\n                  <ix-icon-button\n                    size=\"16\"\n                    onClick={() =>\n                      (this._time = this._time.plus({\n                        [descriptor.unit]: 1,\n                      }))\n                    }\n                    ghost\n                    icon=\"chevron-up\"\n                    variant=\"primary\"\n                    class=\"arrows\"\n                  ></ix-icon-button>\n\n                  <input\n                    class=\"form-control\"\n                    name={descriptor.unit}\n                    type=\"number\"\n                    placeholder={descriptor.placeholder}\n                    value={\n                      this._formattedTime\n                        ? this._formattedTime[descriptor.unit]\n                        : null\n                    }\n                    onKeyDown={(e) => {\n                      if (e.key !== 'ArrowUp' && e.key !== 'ArrowDown') return;\n\n                      const value = e.key === 'ArrowUp' ? 1 : -1;\n                      this._time = this._time.plus({\n                        [descriptor.unit]: value,\n                      });\n                      e.preventDefault();\n                    }}\n                    onChange={(e: any) => {\n                      let inputElement = e.target as HTMLInputElement;\n                      inputElement.value = this.timeUpdate(\n                        descriptor.unit,\n                        +inputElement.value\n                      ).toString();\n                    }}\n                  ></input>\n\n                  <ix-icon-button\n                    size=\"16\"\n                    onClick={() =>\n                      (this._time = this._time.minus({\n                        [descriptor.unit]: 1,\n                      }))\n                    }\n                    ghost\n                    icon=\"chevron-down\"\n                    variant=\"primary\"\n                    class=\"arrows\"\n                  ></ix-icon-button>\n                </div>\n\n                {index !== timepickerInformation.length - 1 && (\n                  <div\n                    class={{\n                      'column-seperator': true,\n                      hidden: descriptor.hidden,\n                    }}\n                  >\n                    :\n                  </div>\n                )}\n              </div>\n            ))}\n\n            <div\n              class={{\n                columns: true,\n                'default-space': true,\n                hidden: this._timeRef === undefined,\n              }}\n            >\n              <ix-icon-button\n                size=\"16\"\n                onClick={() => this.changeTimeReference()}\n                ghost\n                icon=\"chevron-up\"\n                variant=\"primary\"\n                class=\"arrows\"\n              ></ix-icon-button>\n              <div class=\"time-reference\">{this._timeRef}</div>\n              <ix-icon-button\n                size=\"16\"\n                onClick={() => this.changeTimeReference()}\n                ghost\n                icon=\"chevron-down\"\n                variant=\"primary\"\n                class=\"arrows\"\n              ></ix-icon-button>\n            </div>\n          </div>\n          <div class={{ button: true, hidden: !this.standaloneAppearance }}>\n            <ix-button\n              onClick={() => {\n                this.timeSelect.emit(this._time.toFormat(this.format));\n                this.done.emit(this._time.toFormat(this.format));\n              }}\n            >\n              {this.textSelectTime}\n            </ix-button>\n          </div>\n        </ix-date-time-card>\n      </Host>\n    );\n  }\n}\n"],"version":3}