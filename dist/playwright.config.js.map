{"version":3,"file":"playwright.config.js","sourceRoot":"","sources":["../playwright.config.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AAGH,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAC3C,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB;;;GAGG;AACH,8BAA8B;AAC9B,wDAAwD;AAExD,MAAM,MAAM,GAAG,CAAC,qBAAqB,EAAE,oBAAoB,CAAC,CAAC;AAE7D,SAAS,uBAAuB;IAC9B,OAAO,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;QAC9B,OAAO;YACL;gBACE,IAAI,EAAE,cAAc,KAAK,EAAE;gBAC3B,GAAG,oBACE,OAAO,CAAC,gBAAgB,CAAC,CAC7B;gBACD,QAAQ,EAAE;oBACR,KAAK;iBACN;aACF;SACF,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;GAEG;AACH,8DAA8D;AAC9D,MAAM,MAAM,GAAyB;IACnC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,CAAC;IACjE,wCAAwC;IACxC,OAAO,EAAE,EAAE,GAAG,IAAI;IAClB,MAAM,EAAE;QACN;;;WAGG;QACH,OAAO,EAAE,IAAI;KACd;IACD,oCAAoC;IACpC,aAAa,EAAE,IAAI;IACnB,iFAAiF;IACjF,wDAAwD;IACxD,UAAU,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;IAC5B,sBAAsB;IACtB,wDAAwD;IACxD,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/B,sCAAsC;IACtC,OAAO,EAAE,EAAE;IACX,qEAAqE;IACrE,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM;IAC1C,wGAAwG;IACxG,GAAG,EAAE;QACH,oFAAoF;QACpF,aAAa,EAAE,CAAC;QAChB,6DAA6D;QAC7D,oCAAoC;QAEpC,+FAA+F;QAC/F,KAAK,EAAE,gBAAgB;KACxB;IACD,2CAA2C;IAC3C,QAAQ,EAAE,uBAAuB,EAAE;IACnC,SAAS,EAAE;QACT,OAAO,EAAE,oBAAoB;QAC7B,IAAI,EAAE,IAAI;KACX;CACF,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport type { PlaywrightTestConfig } from '@playwright/test';\nimport { devices } from '@playwright/test';\nimport path from 'path';\n\n/**\n * Read environment variables from file.\n * https://github.com/motdotla/dotenv\n */\n// require('dotenv').config();\n// eslint-disable-next-line turbo/no-undeclared-env-vars\n\nconst THEMES = ['theme-classic-light', 'theme-classic-dark'];\n\nfunction buildProjectsWithThemes() {\n  return THEMES.flatMap((theme) => {\n    return [\n      {\n        name: `chromium - ${theme}`,\n        use: {\n          ...devices['Desktop Chrome'],\n        },\n        metadata: {\n          theme,\n        },\n      },\n    ];\n  });\n}\n\n/**\n * See https://playwright.dev/docs/test-configuration.\n */\n/** @type {import('@playwright/test').PlaywrightTestConfig} */\nconst config: PlaywrightTestConfig = {\n  testMatch: path.join(__dirname, 'src', 'tests', '**', '*.e2e.ts'),\n  /* Maximum time one test can run for. */\n  timeout: 30 * 1000,\n  expect: {\n    /**\n     * Maximum time expect() should wait for the condition to be met.\n     * For example in `await expect(locator).toHaveText();`\n     */\n    timeout: 5000,\n  },\n  /* Run tests in files in parallel */\n  fullyParallel: true,\n  /* Fail the build on CI if you accidentally left test.only in the source code. */\n  // eslint-disable-next-line turbo/no-undeclared-env-vars\n  forbidOnly: !!process.env.CI,\n  /* Retry on CI only */\n  // eslint-disable-next-line turbo/no-undeclared-env-vars\n  retries: process.env.CI ? 2 : 0,\n  /* Opt out of parallel tests on CI. */\n  workers: 10,\n  /* Reporter to use. See https://playwright.dev/docs/test-reporters */\n  reporter: process.env.CI ? 'blob' : 'html',\n  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */\n  use: {\n    /* Maximum time each action such as `click()` can take. Defaults to 0 (no limit). */\n    actionTimeout: 0,\n    /* Base URL to use in actions like `await page.goto('/')`. */\n    // baseURL: 'http://localhost:3000',\n\n    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */\n    trace: 'on-first-retry',\n  },\n  /* Configure projects for major browsers */\n  projects: buildProjectsWithThemes(),\n  webServer: {\n    command: 'pnpm run host-root',\n    port: 8080,\n  },\n};\n\nexport default config;\n"]}